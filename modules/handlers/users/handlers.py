from datetime import datetime, timedelta
import logging
import random
import string
from typing import Dict, Optional, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
import re
import asyncio

from modules.config import (
    MAIN_MENU, USER_MENU, SELECTING_USER, WAITING_FOR_INPUT, CONFIRM_ACTION,
    EDIT_USER, EDIT_FIELD, EDIT_VALUE, CREATE_USER, CREATE_USER_FIELD, USER_FIELDS
)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è callback_data
class CallbackData:
    # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    LIST_USERS = "list_users"
    SEARCH_USER = "search_user"
    CREATE_USER = "create_user"
    BACK_TO_MAIN = "back_to_main"
    BACK_TO_USERS = "back_to_users"
    BACK_TO_LIST = "back_to_list"
    
    # –î–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    VIEW_USER = "view_"
    EDIT_USER = "edit_"
    DISABLE_USER = "disable_"
    ENABLE_USER = "enable_"
    RESET_TRAFFIC = "reset_"
    REVOKE_SUBSCRIPTION = "revoke_"
    DELETE_USER = "delete_"
    USER_STATS = "stats_"
    USER_HWID = "hwid_"
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    CONFIRM_ACTION = "confirm_action"
    FINAL_DELETE_USER = "final_delete_user"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    TEMPLATE = "template_"
    CREATE_MANUAL = "create_manual"
    CANCEL_CREATE = "cancel_create"
    USE_TEMPLATE = "use_template_"
    CUSTOMIZE_TEMPLATE = "customize_template_"
    FINISH_TEMPLATE_USER = "finish_template_user"
    ADD_OPTIONAL_FIELDS = "add_optional_fields"
    USE_TEMPLATE_VALUE = "use_template_value_"
    SKIP_FIELD = "skip_field"
    
    # –ü–æ–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
    CREATE_FIELD = "create_field_"
    CREATE_DATE = "create_date_"
    CREATE_TRAFFIC = "create_traffic_"
    CREATE_DESC = "create_desc_"
    CREATE_DEVICE = "create_device_"
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–µ–π
    EDIT_FIELD = "edit_field_"
    
    # HWID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    ADD_HWID = "add_hwid_"
    DEL_HWID = "del_hwid_"
    CONFIRM_DEL_HWID = "confirm_del_hwid_"
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    PREV_PAGE = "prev_page"
    NEXT_PAGE = "next_page"
    PAGE_INFO = "page_info"
    USERS_PAGE = "users_page_"
    
    # SelectionHelper
    SELECT_USER = "select_user_"
    USER_ACTION = "user_action_"
    BACK = "back"

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
class Messages:
    # –û—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    NOT_AUTHORIZED = "‚õî –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞."
    
    # –û–±—â–∏–µ –æ—à–∏–±–∫–∏
    USER_NOT_FOUND = "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö."
    ERROR_LOADING = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö."
    INVALID_INPUT = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞."
    OPERATION_FAILED = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é."
    
    # –£—Å–ø–µ—à–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    USER_CREATED = "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!"
    USER_UPDATED = "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!"
    USER_DELETED = "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!"
    FIELD_UPDATED = "‚úÖ –ü–æ–ª–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ."
    
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    CONFIRM_DELETE = "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?"
    CONFIRM_DISABLE = "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?"
    CONFIRM_ENABLE = "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?"
    CONFIRM_RESET = "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å —Ç—Ä–∞—Ñ–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?"
    CONFIRM_REVOKE = "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–æ–∑–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?"
from modules.api.users import UserAPI
from modules.utils.formatters import format_bytes, format_user_details, format_user_details_safe, escape_markdown, safe_edit_message
from modules.utils.selection_helpers import SelectionHelper
from modules.utils.auth import (
    check_admin,
    check_authorization,
    get_user_role,
    is_admin_user,
    INSUFFICIENT_PERMISSIONS_MESSAGE
)
from modules.handlers.core.start import show_main_menu

logger = logging.getLogger(__name__)

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
def require_authorization(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        if not check_authorization(update.effective_user):
            if update.callback_query:
                await update.callback_query.answer(Messages.NOT_AUTHORIZED, show_alert=True)
            else:
                await update.message.reply_text(Messages.NOT_AUTHORIZED)
            return ConversationHandler.END

        user_id = update.effective_user.id
        context.user_data['role'] = get_user_role(user_id)
        context.user_data['is_admin'] = is_admin_user(user_id)

        return await func(update, context, *args, **kwargs)
    return wrapper

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def log_user_action(action: str):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    def decorator(func):
        async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
            user_id = update.effective_user.id if update.effective_user else "unknown"
            username = update.effective_user.username if update.effective_user else "unknown"
            
            logger.info(f"User action: {action} by user {username} (ID: {user_id})")
            
            try:
                result = await func(update, context, *args, **kwargs)
                logger.info(f"Action {action} completed successfully for user {username}")
                return result
            except Exception as e:
                logger.error(f"Action {action} failed for user {username}: {str(e)}")
                raise
        return wrapper
    return decorator

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
class ErrorHandler:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    
    @staticmethod
    async def handle_api_error(update: Update, context: ContextTypes.DEFAULT_TYPE, error: Exception, operation: str = "–æ–ø–µ—Ä–∞—Ü–∏—è") -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ API"""
        logger.error(f"API error during {operation}: {str(error)}")
        
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ {operation}.\n\n"
        
        if "connection" in str(error).lower():
            error_message += "üîå –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        elif "timeout" in str(error).lower():
            error_message += "‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        elif "unauthorized" in str(error).lower() or "forbidden" in str(error).lower():
            error_message += "üîí –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏."
        elif "not found" in str(error).lower():
            error_message += "üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        else:
            error_message += "‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        
        keyboard = KeyboardBuilder.create_back_button()
        
        if update.callback_query:
            try:
                await update.callback_query.edit_message_text(
                    text=error_message,
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
            except Exception as edit_error:
                logger.error(f"Error editing message: {edit_error}")
                await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
        else:
            await update.message.reply_text(
                text=error_message,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
        
        return True
    
    @staticmethod
    async def handle_validation_error(update: Update, context: ContextTypes.DEFAULT_TYPE, error_message: str, back_callback: str = CallbackData.BACK_TO_USERS) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        keyboard = KeyboardBuilder.create_back_button(back_callback)
        
        if update.callback_query:
            try:
                await update.callback_query.edit_message_text(
                    text=f"‚ùå {error_message}",
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
            except Exception as edit_error:
                logger.error(f"Error editing message: {edit_error}")
                await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
        else:
            await update.message.reply_text(
                text=f"‚ùå {error_message}",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
        
        return True
    
    @staticmethod
    async def handle_unexpected_error(update: Update, context: ContextTypes.DEFAULT_TYPE, error: Exception, operation: str = "–æ–ø–µ—Ä–∞—Ü–∏—è") -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏"""
        logger.error(f"Unexpected error during {operation}: {str(error)}", exc_info=True)
        
        error_message = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ {operation}.\n\n"
        error_message += "üõ†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã."
        
        keyboard = KeyboardBuilder.create_back_button()
        
        if update.callback_query:
            try:
                await update.callback_query.edit_message_text(
                    text=error_message,
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
            except Exception as edit_error:
                logger.error(f"Error editing message: {edit_error}")
                await update.callback_query.answer("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")
        else:
            await update.message.reply_text(
                text=error_message,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
        
        return True

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
class UserCache:
    """–ö–ª–∞—Å—Å –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    def __init__(self, cache_ttl: int = 300):  # 5 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self._cache: Dict[str, Dict[str, Any]] = {}
        self._cache_ttl = cache_ttl
    
    def _is_expired(self, timestamp: float) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ –∫—ç—à–∞"""
        return datetime.now().timestamp() - timestamp > self._cache_ttl
    
    async def get_user(self, uuid: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫—ç—à–∞ –∏–ª–∏ API"""
        cache_key = f"user_{uuid}"
        
        if cache_key in self._cache:
            cached_data = self._cache[cache_key]
            if not self._is_expired(cached_data['timestamp']):
                logger.debug(f"User {uuid} found in cache")
                return cached_data['data']
            else:
                # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ
                del self._cache[cache_key]
        
        # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ–º –∫—ç—à (–∫–∞–∂–¥—ã–π 10-–π –∑–∞–ø—Ä–æ—Å)
        if len(self._cache) % 10 == 0:
            self.cleanup_expired()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API
        try:
            user_data = await UserAPI.get_user_by_uuid(uuid)
            if user_data:
                self._cache[cache_key] = {
                    'data': user_data,
                    'timestamp': datetime.now().timestamp()
                }
                logger.debug(f"User {uuid} cached")
            return user_data
        except Exception as e:
            logger.error(f"Error fetching user {uuid}: {e}")
            return None
    
    async def get_all_users(self) -> Optional[list]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∫—ç—à–∞ –∏–ª–∏ API"""
        cache_key = "all_users"
        
        if cache_key in self._cache:
            cached_data = self._cache[cache_key]
            if not self._is_expired(cached_data['timestamp']):
                logger.debug("All users found in cache")
                return cached_data['data']
            else:
                del self._cache[cache_key]
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API
        try:
            response = await UserAPI.get_all_users()
            users = []
            
            if isinstance(response, dict):
                if 'users' in response:
                    users = response['users'] or []
                elif 'response' in response and isinstance(response['response'], dict) and 'users' in response['response']:
                    users = response['response']['users'] or []
            elif isinstance(response, list):
                users = response
            
            if users:
                self._cache[cache_key] = {
                    'data': users,
                    'timestamp': datetime.now().timestamp()
                }
                logger.debug(f"Cached {len(users)} users")
            
            return users
        except Exception as e:
            logger.error(f"Error fetching all users: {e}")
            return None
    
    def invalidate_user(self, uuid: str):
        """–ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫—ç—à –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        cache_key = f"user_{uuid}"
        if cache_key in self._cache:
            del self._cache[cache_key]
            logger.debug(f"Cache invalidated for user {uuid}")
    
    def invalidate_all_users(self):
        """–ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫—ç—à –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        self._cache.clear()
        logger.debug("All users cache invalidated")
    
    def cleanup_expired(self):
        """–û—á–∏—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫—ç—à–∞"""
        current_time = datetime.now().timestamp()
        expired_keys = [
            key for key, data in self._cache.items()
            if current_time - data['timestamp'] > self._cache_ttl
        ]
        
        for key in expired_keys:
            del self._cache[key]
        
        if expired_keys:
            logger.debug(f"Cleaned up {len(expired_keys)} expired cache entries")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫—ç—à–∞
user_cache = UserCache()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
def cleanup_cache():
    """–û—á–∏—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫—ç—à–∞"""
    try:
        user_cache.cleanup_expired()
        logger.debug("Cache cleanup completed")
    except Exception as e:
        logger.error(f"Error during cache cleanup: {e}")

# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏
class KeyboardBuilder:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
    
    @staticmethod
    def create_main_menu(is_admin: bool):
        """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        rows = [
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data=CallbackData.LIST_USERS)],
            [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=CallbackData.SEARCH_USER)]
        ]
        if is_admin:
            rows.append([InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=CallbackData.CREATE_USER)])
        rows.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=CallbackData.BACK_TO_MAIN)])
        return InlineKeyboardMarkup(rows)
    
    @staticmethod
    def create_back_button(callback_data: str = CallbackData.BACK_TO_USERS):
        """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥'"""
        return InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=callback_data)]])
    
    @staticmethod
    def create_confirmation_buttons(confirm_callback: str, cancel_callback: str, confirm_text: str = "‚úÖ –î–∞", cancel_text: str = "‚ùå –û—Ç–º–µ–Ω–∞"):
        """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        return InlineKeyboardMarkup([
            [InlineKeyboardButton(confirm_text, callback_data=confirm_callback)],
            [InlineKeyboardButton(cancel_text, callback_data=cancel_callback)]
        ])
    
    @staticmethod
    def create_user_actions_keyboard(uuid: str, user_status: str = "ACTIVE"):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        keyboard = [
            [InlineKeyboardButton("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"{CallbackData.EDIT_USER}{uuid}")],
            [InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ç—Ä–∞—Ñ–∏–∫", callback_data=f"{CallbackData.RESET_TRAFFIC}{uuid}")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"{CallbackData.USER_STATS}{uuid}")],
            [InlineKeyboardButton("üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ HWID", callback_data=f"{CallbackData.USER_HWID}{uuid}")]
        ]
        if user_status == "ACTIVE":
            keyboard.append([InlineKeyboardButton("üî¥ –û—Ç–∫–ª—é—á–∏—Ç—å", callback_data=f"{CallbackData.DISABLE_USER}{uuid}")])
        else:
            keyboard.append([InlineKeyboardButton("üü¢ –í–∫–ª—é—á–∏—Ç—å", callback_data=f"{CallbackData.ENABLE_USER}{uuid}")])
        keyboard.append([InlineKeyboardButton("üîÑ –û—Ç–æ–∑–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=f"{CallbackData.REVOKE_SUBSCRIPTION}{uuid}")])
        keyboard.append([InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"{CallbackData.DELETE_USER}{uuid}")])
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=CallbackData.BACK_TO_LIST)])
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def create_pagination_buttons(current_page: int, total_pages: int, callback_prefix: str = "page"):
        """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
        keyboard = []
        
        if current_page > 0:
            keyboard.append(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{callback_prefix}_{current_page - 1}"))
        
        if current_page < total_pages - 1:
            keyboard.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"{callback_prefix}_{current_page + 1}"))
        
        return keyboard

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
class UserUtils:
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    
    @staticmethod
    def format_user_status(status: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        status_map = {
            "ACTIVE": "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω",
            "INACTIVE": "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω",
            "EXPIRED": "‚è∞ –ò—Å—Ç–µ–∫",
            "SUSPENDED": "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
        }
        return status_map.get(status, f"‚ùì {status}")
    
    @staticmethod
    def format_traffic_usage(used: int, limit: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞"""
        if limit == 0:
            return f"üìä {format_bytes(used)} / –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π"
        
        percent = (used / limit) * 100
        status_emoji = "üü¢" if percent < 50 else "üü°" if percent < 90 else "üî¥"
        
        return f"üìä {format_bytes(used)} / {format_bytes(limit)} ({percent:.1f}%) {status_emoji}"
    
    @staticmethod
    def format_expiration_date(expire_at: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è"""
        try:
            expire_date = datetime.fromisoformat(expire_at.replace('Z', '+00:00'))
            days_left = (expire_date - datetime.now().astimezone()).days
            
            if days_left < 0:
                return f"‚è∞ –ò—Å—Ç–µ–∫ {abs(days_left)} –¥–Ω–µ–π –Ω–∞–∑–∞–¥"
            elif days_left == 0:
                return "‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è"
            elif days_left <= 7:
                return f"‚ö†Ô∏è –ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π"
            else:
                return f"üìÖ –ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π"
        except Exception:
            return f"üìÖ {expire_at[:10]}"
    
    @staticmethod
    def get_user_summary(user: Dict[str, Any]) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        lines = [
            f"üë§ *{escape_markdown(user.get('username', '–ë–µ–∑ –∏–º–µ–Ω–∏'))}*",
            f"üÜî `{user.get('uuid', 'N/A')}`",
            f"üìä {UserUtils.format_traffic_usage(user.get('usedTrafficBytes', 0), user.get('trafficLimitBytes', 0))}",
            f"üìÖ {UserUtils.format_expiration_date(user.get('expireAt', ''))}",
            f"üì± {UserUtils.format_user_status(user.get('status', 'UNKNOWN'))}"
        ]
        
        if user.get('email'):
            lines.append(f"üìß {escape_markdown(user['email'])}")
        
        if user.get('tag'):
            lines.append(f"üè∑Ô∏è {escape_markdown(user['tag'])}")
        
        return "\n".join(lines)

# –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
class BulkOperations:
    """–ö–ª–∞—Å—Å –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    
    @staticmethod
    async def bulk_disable_users(uuids: list[str]) -> Dict[str, bool]:
        """–ú–∞—Å—Å–æ–≤–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        results = {}
        
        for uuid in uuids:
            try:
                result = await UserAPI.disable_user(uuid)
                results[uuid] = result
                if result:
                    user_cache.invalidate_user(uuid)
            except Exception as e:
                logger.error(f"Error disabling user {uuid}: {e}")
                results[uuid] = False
        
        return results
    
    @staticmethod
    async def bulk_enable_users(uuids: list[str]) -> Dict[str, bool]:
        """–ú–∞—Å—Å–æ–≤–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        results = {}
        
        for uuid in uuids:
            try:
                result = await UserAPI.enable_user(uuid)
                results[uuid] = result
                if result:
                    user_cache.invalidate_user(uuid)
            except Exception as e:
                logger.error(f"Error enabling user {uuid}: {e}")
                results[uuid] = False
        
        return results
    
    @staticmethod
    async def bulk_reset_traffic(uuids: list[str]) -> Dict[str, bool]:
        """–ú–∞—Å—Å–æ–≤—ã–π —Å–±—Ä–æ—Å —Ç—Ä–∞—Ñ–∏–∫–∞"""
        results = {}
        
        for uuid in uuids:
            try:
                result = await UserAPI.reset_user_traffic(uuid)
                results[uuid] = result
                if result:
                    user_cache.invalidate_user(uuid)
            except Exception as e:
                logger.error(f"Error resetting traffic for user {uuid}: {e}")
                results[uuid] = False
        
        return results
    
    @staticmethod
    def format_bulk_results(results: Dict[str, bool], operation: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        successful = sum(1 for success in results.values() if success)
        total = len(results)
        
        message = f"üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Å—Å–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏: {operation}*\n\n"
        message += f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful}/{total}\n"
        message += f"‚ùå –û—à–∏–±–æ–∫: {total - successful}/{total}\n\n"
        
        if successful < total:
            failed_uuids = [uuid for uuid, success in results.items() if not success]
            message += f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ UUID: `{', '.join(failed_uuids[:5])}`"
            if len(failed_uuids) > 5:
                message += f" –∏ –µ—â–µ {len(failed_uuids) - 5}..."
        
        return message

# –í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
class DataValidators:
    """–ö–ª–∞—Å—Å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    
    @staticmethod
    def validate_username(username: str) -> tuple[bool, str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not username:
            return False, "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
        
        if not re.match(r"^[a-zA-Z0-9_-]{6,34}$", username):
            return False, "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –∏ –¥–µ—Ñ–∏—Å—ã. –î–ª–∏–Ω–∞ –æ—Ç 6 –¥–æ 34 —Å–∏–º–≤–æ–ª–æ–≤"
        
        return True, ""
    
    @staticmethod
    def validate_email(email: str) -> tuple[bool, str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è email"""
        if not email:
            return True, ""  # Email –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
        
        if not re.match(r"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$", email):
            return False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email"
        
        return True, ""
    
    @staticmethod
    def validate_telegram_id(telegram_id: str) -> tuple[bool, str, int]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è Telegram ID"""
        if not telegram_id:
            return True, "", 0  # Telegram ID –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
        
        try:
            tid = int(telegram_id)
            if tid <= 0:
                return False, "Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º", 0
            return True, "", tid
        except ValueError:
            return False, "Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º", 0
    
    @staticmethod
    def validate_date(date_str: str) -> tuple[bool, str, str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã"""
        if not date_str:
            return True, "", ""  # –î–∞—Ç–∞ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞
        
        try:
            date_obj = datetime.strptime(date_str, "%Y-%m-%d")
            formatted_date = date_obj.strftime("%Y-%m-%dT00:00:00.000Z")
            return True, "", formatted_date
        except ValueError:
            return False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD", ""
    
    @staticmethod
    def validate_traffic_limit(traffic_str: str) -> tuple[bool, str, int]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ª–∏–º–∏—Ç–∞ —Ç—Ä–∞—Ñ–∏–∫–∞"""
        if not traffic_str:
            return True, "", 0  # –õ–∏–º–∏—Ç –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
        
        try:
            traffic = int(traffic_str)
            if traffic < 0:
                return False, "–õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º", 0
            return True, "", traffic
        except ValueError:
            return False, "–õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º", 0
    
    @staticmethod
    def validate_device_limit(device_str: str) -> tuple[bool, str, int]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ª–∏–º–∏—Ç–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        if not device_str:
            return True, "", 0  # –õ–∏–º–∏—Ç –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
        
        try:
            devices = int(device_str)
            if devices < 0:
                return False, "–õ–∏–º–∏—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º", 0
            return True, "", devices
        except ValueError:
            return False, "–õ–∏–º–∏—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º", 0

@require_authorization
@log_user_action("show_users_menu")
async def show_users_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show users menu"""
    # English layout (early return) to improve readability
    try:
        is_admin = context.user_data.get('is_admin', False)
        keyboard_rows = [
            [InlineKeyboardButton("üìã List Users", callback_data=CallbackData.LIST_USERS)],
            [InlineKeyboardButton("üîé Search User", callback_data=CallbackData.SEARCH_USER)],
        ]
        if is_admin:
            keyboard_rows.append([InlineKeyboardButton("‚ûï Create User", callback_data=CallbackData.CREATE_USER)])
        keyboard_rows.append([InlineKeyboardButton("‚¨ÖÔ∏è Back to Main", callback_data=CallbackData.BACK_TO_MAIN)])
        reply_markup = InlineKeyboardMarkup(keyboard_rows)
        message = (
            "üë• Users Menu\n\n"
            "‚Ä¢ List users\n"
            "‚Ä¢ Search by name, Telegram ID, UUID, short UUID, email, or tag\n\n"
            "Choose an option below:"
        )
        await safe_edit_message(update.callback_query, message, reply_markup, None)
        return
    except Exception:
        pass
    reply_markup = KeyboardBuilder.create_main_menu(context.user_data.get('is_admin', False))

    message = (
        "üë• *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏*\n\n"
        "üîç *–ü–æ–∏—Å–∫:* –≤–≤–µ–¥–∏—Ç–µ –ª—é–±—É—é —á–∞—Å—Ç—å –∏–º–µ–Ω–∏, Telegram ID, UUID, –∫–æ—Ä–æ—Ç–∫–æ–≥–æ UUID, email, —Ç–µ–≥–∞ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—è.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    await safe_edit_message(
        update.callback_query,
        message,
        reply_markup,
        "Markdown"
    )

@require_authorization
@log_user_action("handle_users_menu")
async def handle_users_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle users menu selection"""
    query = update.callback_query
    await query.answer()

    data = query.data

    is_admin = context.user_data.get('is_admin', False)

    try:
        logger.debug(f"handle_user_selection received callback data: {data}")
    except Exception:
        pass

    # English prompt for search (clean layout)
    if data == CallbackData.SEARCH_USER:
        back_markup = InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è Back", callback_data=CallbackData.BACK_TO_USERS)]])
        search_prompt = (
            "üîé Enter a search query:\n\n"
            "For example: name, email, tag, UUID or Telegram ID."
        )
        await safe_edit_message(
            query,
            search_prompt,
            back_markup,
            None
        )
        context.user_data["search_type"] = "generic"
        return WAITING_FOR_INPUT

    if data == CallbackData.LIST_USERS:
        await list_users(update, context)
        return SELECTING_USER

    elif data == CallbackData.SEARCH_USER:
        back_markup = KeyboardBuilder.create_back_button()
        search_prompt = (
            "üîç –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
            "üí° *–ü—Ä–∏–º–µ—Ä:* –∏–º—è, —á–∞—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏—è, email, —Ç–µ–≥, UUID –∏–ª–∏ Telegram ID."
        )
        await safe_edit_message(
            query,
            search_prompt,
            back_markup,
            "Markdown"
        )
        context.user_data["search_type"] = "generic"
        return WAITING_FOR_INPUT
        
    elif data in (CallbackData.CREATE_USER, "menu_create_user"):
        await start_create_user(update, context)
        return CREATE_USER_FIELD

    elif data == CallbackData.BACK_TO_USERS:
        await show_users_menu(update, context)
        return USER_MENU

    elif data == CallbackData.BACK_TO_MAIN:
        await show_main_menu(update, context)
        return MAIN_MENU

    return USER_MENU

async def search_users_by_term(term: str):
    """Fetch users and filter by generic term"""
    try:
        users = await user_cache.get_all_users()
        if not users:
            return []
    except Exception as e:
        logger.error(f"Error fetching users for search: {e}")
        return []

    term_lower = term.lower()
    matches = []
    seen = set()

    for user in users:
        if not isinstance(user, dict):
            continue
        user_uuid = str(user.get('uuid') or '')
        if not user_uuid or user_uuid in seen:
            continue

        fields = [
            str(user.get('username') or ''),
            str(user.get('description') or ''),
            str(user.get('email') or ''),
            str(user.get('tag') or ''),
            str(user.get('shortUuid') or ''),
            user_uuid,
            str(user.get('telegramId') or '')
        ]

        if any(term_lower in field.lower() for field in fields if field):
            matches.append(user)
            seen.add(user_uuid)

    matches.sort(key=lambda u: (u.get('username') or '').lower())
    return matches


async def list_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """List all users with improved selection interface"""
    await update.callback_query.edit_message_text("üìã –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

    try:
        # Use SelectionHelper for user-friendly interface
        keyboard, users_data = await SelectionHelper.get_users_selection_keyboard(
            callback_prefix="select_user",
            include_back=True,
            max_per_row=1
        )
        
        if not users_data:
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_users")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                reply_markup=reply_markup
            )
            return USER_MENU

        # Store users data for later use
        context.user_data["users_data"] = users_data
        
        message = f"üë• *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π* ({len(users_data)} —à—Ç.)\n\n"
        message += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"

        await update.callback_query.edit_message_text(
            text=message,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
        return SELECTING_USER
        
    except Exception as e:
        logger.error(f"Error in list_users: {e}")
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_users")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}",
            reply_markup=reply_markup
        )
        return USER_MENU

    if not users or not users.get("users"):
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_users")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞.",
            reply_markup=reply_markup
        )
        return USER_MENU

    # Create a paginated list of users
    users_per_page = 5
    context.user_data["users"] = users["users"]
    context.user_data["current_page"] = 0
    context.user_data["users_per_page"] = users_per_page

    await send_users_page(update, context)
    return SELECTING_USER

async def send_users_page(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send a page of users"""
    users = context.user_data["users"]
    current_page = context.user_data["current_page"]
    users_per_page = context.user_data["users_per_page"]

    start_idx = current_page * users_per_page
    end_idx = min(start_idx + users_per_page, len(users))

    message = f"üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏* (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1}/{(len(users) + users_per_page - 1) // users_per_page}):\n\n"

    for i in range(start_idx, end_idx):
        user = users[i]
        status_emoji = "‚úÖ" if user["status"] == "ACTIVE" else "‚ùå"
        
        # Format expiration date
        try:
            expire_date = datetime.fromisoformat(user['expireAt'].replace('Z', '+00:00'))
            days_left = (expire_date - datetime.now().astimezone()).days
            expire_status = "üü¢" if days_left > 7 else "üü°" if days_left > 0 else "üî¥"
            expire_text = f"{user['expireAt'][:10]} ({days_left} –¥–Ω–µ–π)"
        except Exception:
            expire_status = "üìÖ"
            expire_text = user['expireAt'][:10]
        
        message += f"{i+1}. {status_emoji} *{escape_markdown(user['username'])}*\n"
        message += f"   üîë ID: `{user['shortUuid']}`\n"
        message += f"   üìà –¢—Ä–∞—Ñ–∏–∫: {format_bytes(user['usedTrafficBytes'])}/{format_bytes(user['trafficLimitBytes'])}\n"
        message += f"   {expire_status} –ò—Å—Ç–µ–∫–∞–µ—Ç: {expire_text}\n\n"

    # Create navigation buttons
    keyboard = []
    nav_row = []

    if current_page > 0:
        nav_row.append(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="prev_page"))

    if end_idx < len(users):
        nav_row.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data="next_page"))

    if nav_row:
        keyboard.append(nav_row)

    # Add action buttons for each user
    for i in range(start_idx, end_idx):
        user = users[i]
        user_row = [
            InlineKeyboardButton(f"üë§ {user['username']}", callback_data=f"view_{user['uuid']}")
        ]
        keyboard.append(user_row)

    # Add back button
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_users")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        await update.callback_query.edit_message_text(
            text=message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    else:
        await update.message.reply_text(
            text=message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )

async def handle_user_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle user selection with improved UI"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if not check_authorization(update.effective_user):
        await update.callback_query.answer("‚õî –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.", show_alert=True)
        return ConversationHandler.END
    
    query = update.callback_query
    await query.answer()

    data = query.data

    # Handle new SelectionHelper callbacks
    if data.startswith("select_user_"):
        user_uuid = data.split("_", 2)[2]
        await show_user_details(update, context, user_uuid)
        return SELECTING_USER

    # Handle back button from SelectionHelper
    elif data == "back":
        await show_users_menu(update, context)
        return USER_MENU

    # Handle pagination from SelectionHelper
    elif data.startswith("users_page_"):
        page = int(data.split("_")[2])
        try:
            keyboard, users_data = await SelectionHelper.get_users_selection_keyboard(
                callback_prefix="select_user",
                include_back=True,
                max_per_row=1,
                page=page
            )
            
            context.user_data["users_data"] = users_data
            
            message = f"üë• *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π* ({len(users_data)} —à—Ç.) - —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}\n\n"
            message += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"

            await query.edit_message_text(
                text=message,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
        except Exception as e:
            logger.error(f"Error in pagination: {e}")
            await show_users_menu(update, context)
            return USER_MENU

    elif data == "page_info":
        await query.answer("–≠—Ç–æ —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–µ–ª–∫–∏, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å —Å–ø–∏—Å–æ–∫.")
        return SELECTING_USER

    # Legacy support for old callback patterns
    elif data == "prev_page":
        context.user_data["current_page"] -= 1
        await send_users_page(update, context)

    elif data == "next_page":
        context.user_data["current_page"] += 1
        await send_users_page(update, context)

    elif data == "back_to_users":
        await show_users_menu(update, context)
        return USER_MENU

    elif data == "back_to_list":
        await list_users(update, context)
        return SELECTING_USER

    elif data.startswith("view_"):
        uuid = data.split("_")[1]
        try:
            logger.debug(f"Opening user details for uuid={uuid}")
        except Exception:
            pass
        await show_user_details(update, context, uuid)
        
    elif data.startswith("add_hwid_"):
        uuid = data.split("_")[2]
        await start_add_hwid(update, context, uuid)
        return WAITING_FOR_INPUT
        
    elif data.startswith("del_hwid_"):
        parts = data.split("_")
        uuid = parts[2]
        hwid = parts[3]
        await delete_hwid_device(update, context, uuid, hwid)

    return SELECTING_USER

async def show_user_details(update: Update, context: ContextTypes.DEFAULT_TYPE, uuid):
    """Show user details (safe formatting to avoid Markdown parse issues)"""
    try:
        logger.debug(f"show_user_details called for uuid={uuid}")
    except Exception:
        pass
    user = await user_cache.get_user(uuid)
    context.user_data.pop("search_type", None)
    context.user_data.pop("waiting_for", None)
    if not user:
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_users")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.edit_message_text(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=reply_markup
        )
        return USER_MENU

    # –§–æ—Ä–º–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ Markdown
    try:
        message = format_user_details_safe(user)
    except Exception as e:
        logger.error(f"Error formatting user details (safe): {e}")
        message = f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.get('username','')}\nüÜî UUID: {user.get('uuid','')}\nüìä –°—Ç–∞—Ç—É—Å: {user.get('status','')}"

    keyboard = SelectionHelper.create_user_info_keyboard(uuid, action_prefix="user_action", is_admin=context.user_data.get('is_admin', False))

    try:
        await update.callback_query.edit_message_text(
            text=message,
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"Error sending user details: {e}")
        try:
            await update.callback_query.edit_message_caption(
                caption=message,
                reply_markup=keyboard
            )
        except Exception as e2:
            logger.error(f"Fallback to edit_message_caption failed: {e2}")
            await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")

    context.user_data["current_user"] = user
    return SELECTING_USER

async def handle_user_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle user action with improved SelectionHelper support"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if not check_authorization(update.effective_user):
        await update.callback_query.answer("‚õî –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.", show_alert=True)
        return ConversationHandler.END
    
    query = update.callback_query
    await query.answer()

    data = query.data

    # Handle new SelectionHelper callback patterns
    if data.startswith("user_action_"):
        action_parts = data.split("_")
        if len(action_parts) >= 4:
            action = action_parts[2]
            admin_only_actions = {"edit", "disable", "enable", "reset", "revoke", "delete", "hwid"}
            if not is_admin and action in admin_only_actions:
                await query.answer(INSUFFICIENT_PERMISSIONS_MESSAGE, show_alert=True)
                return SELECTING_USER

            uuid = "_".join(action_parts[3:])  # Handle UUIDs with underscores
            
            if action == "edit":
                return await start_edit_user(update, context, uuid)
            elif action == "refresh":
                await show_user_details(update, context, uuid)
                return SELECTING_USER
            elif action == "disable":
                context.user_data["action"] = "disable"
                context.user_data["uuid"] = uuid
                
                keyboard = [
                    [
                        InlineKeyboardButton("‚úÖ –î–∞, –æ—Ç–∫–ª—é—á–∏—Ç—å", callback_data="confirm_action"),
                        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"view_{uuid}")
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?\n\nUUID: `{uuid}`",
                    reply_markup=reply_markup,
                    parse_mode="Markdown"
                )
                return CONFIRM_ACTION
            elif action == "enable":
                context.user_data["action"] = "enable"
                context.user_data["uuid"] = uuid
                
                keyboard = [
                    [
                        InlineKeyboardButton("‚úÖ –î–∞, –≤–∫–ª—é—á–∏—Ç—å", callback_data="confirm_action"),
                        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"view_{uuid}")
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?\n\nUUID: `{uuid}`",
                    reply_markup=reply_markup,
                    parse_mode="Markdown"
                )
                return CONFIRM_ACTION
            elif action == "reset" and len(action_parts) >= 5 and action_parts[3] == "traffic":
                context.user_data["action"] = "reset"
                context.user_data["uuid"] = "_".join(action_parts[4:])
                
                keyboard = [
                    [
                        InlineKeyboardButton("‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å", callback_data="confirm_action"),
                        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"view_{uuid}")
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å —Ç—Ä–∞—Ñ–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?\n\nUUID: `{uuid}`",
                    reply_markup=reply_markup,
                    parse_mode="Markdown"
                )
                return CONFIRM_ACTION
            elif action == "revoke":
                context.user_data["action"] = "revoke"
                context.user_data["uuid"] = uuid
                
                keyboard = [
                    [
                        InlineKeyboardButton("‚úÖ –î–∞, –æ—Ç–æ–∑–≤–∞—Ç—å", callback_data="confirm_action"),
                        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"view_{uuid}")
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–æ–∑–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?\n\nUUID: `{uuid}`",
                    reply_markup=reply_markup,
                    parse_mode="Markdown"
                )
                return CONFIRM_ACTION
            elif action == "delete":
                # Confirm user deletion with extra protection
                await confirm_delete_user(update, context, uuid)
                return CONFIRM_ACTION

    admin_only_prefixes = ("disable_", "enable_", "reset_", "revoke_", "delete_", "edit_", "add_hwid_", "del_hwid_", "confirm_del_hwid_")
    if not is_admin and data.startswith(admin_only_prefixes):
        await query.answer(INSUFFICIENT_PERMISSIONS_MESSAGE, show_alert=True)
        return SELECTING_USER

    # Legacy support for back navigation
    if data == "back_to_list":
        await list_users(update, context)
        return SELECTING_USER

    elif data == "back_to_users":
        await show_users_menu(update, context)
        return USER_MENU

    elif data.startswith("disable_"):
        uuid = data.split("_")[1]
        context.user_data["action"] = "disable"
        context.user_data["uuid"] = uuid
        
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –î–∞, –æ—Ç–∫–ª—é—á–∏—Ç—å", callback_data="confirm_action"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"view_{uuid}")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?\n\nUUID: `{uuid}`",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        return CONFIRM_ACTION

    elif data.startswith("enable_"):
        uuid = data.split("_")[1]
        context.user_data["action"] = "enable"
        context.user_data["uuid"] = uuid
        
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –î–∞, –≤–∫–ª—é—á–∏—Ç—å", callback_data="confirm_action"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"view_{uuid}")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?\n\nUUID: `{uuid}`",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        return CONFIRM_ACTION

    elif data.startswith("reset_"):
        uuid = data.split("_")[1]
        context.user_data["action"] = "reset"
        context.user_data["uuid"] = uuid
        
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å", callback_data="confirm_action"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"view_{uuid}")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å —Ç—Ä–∞—Ñ–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?\n\nUUID: `{uuid}`",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        return CONFIRM_ACTION

    elif data.startswith("revoke_"):
        uuid = data.split("_")[1]
        context.user_data["action"] = "revoke"
        context.user_data["uuid"] = uuid
        
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –î–∞, –æ—Ç–æ–∑–≤–∞—Ç—å", callback_data="confirm_action"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"view_{uuid}")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–æ–∑–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?\n\nUUID: `{uuid}`",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        return CONFIRM_ACTION

    elif data.startswith("edit_"):
        uuid = data.split("_")[1]
        return await start_edit_user(update, context, uuid)
        
    elif data.startswith("hwid_"):
        uuid = data.split("_")[1]
        return await show_user_hwid_devices(update, context, uuid)
        
    elif data.startswith("stats_"):
        uuid = data.split("_")[1]
        return await show_user_stats(update, context, uuid)
        
    elif data.startswith("confirm_del_hwid_"):
        parts = data.split("_")
        uuid = parts[3]
        hwid = parts[4]
        return await confirm_delete_hwid_device(update, context, uuid, hwid)

    return SELECTING_USER

@check_admin
async def handle_action_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle action confirmation"""
    query = update.callback_query
    await query.answer()

    data = query.data

    # Handle final delete confirmation
    if data == "final_delete_user":
        return await execute_user_deletion(update, context)

    if data == "confirm_action":
        action = context.user_data.get("action")
        uuid = context.user_data.get("uuid")
        
        if not action or not uuid:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ UUID –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return SELECTING_USER
        
        result = None
        action_text = ""
        
        if action == "disable":
            result = await UserAPI.disable_user(uuid)
            action_text = "–æ—Ç–∫–ª—é—á–µ–Ω"
        elif action == "enable":
            result = await UserAPI.enable_user(uuid)
            action_text = "–≤–∫–ª—é—á–µ–Ω"
        elif action == "reset":
            result = await UserAPI.reset_user_traffic(uuid)
            action_text = "—Å–±—Ä–æ—à–µ–Ω —Ç—Ä–∞—Ñ–∏–∫"
        elif action == "revoke":
            result = await UserAPI.revoke_user_subscription(uuid)
            action_text = "–æ—Ç–æ–∑–≤–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞"
        
        if result:
            keyboard = [
                [InlineKeyboardButton("üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"view_{uuid}")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_list")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ {action_text}.\n\nUUID: `{uuid}`",
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
        else:
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"view_{uuid}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ: {action}.\n\nUUID: `{uuid}`",
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
    else:
        uuid = context.user_data.get("uuid")
        if uuid:
            await show_user_details(update, context, uuid)
        else:
            await show_users_menu(update, context)
            return USER_MENU

    return SELECTING_USER

async def handle_text_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle text input"""
    # Check if we're waiting for HWID input
    if context.user_data.get("waiting_for") == "hwid":
        return await handle_hwid_input(update, context)
    
    # Check if we're searching for a user
    search_type = context.user_data.get("search_type")

    if not search_type:
        # Check if we're in user creation mode
        if "create_user_fields" in context.user_data and "current_field_index" in context.user_data:
            return await handle_create_user_input(update, context)
    
        # If we're not in any special mode, show an error
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —Ç–∏–ø –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await show_users_menu(update, context)
        return USER_MENU

    search_value = update.message.text.strip()

    if search_type in ("generic", "username"):
        term = search_value.strip()
        if len(term) < 2:
            back_markup = InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_users")]])
            await update.message.reply_text(
                "‚ùó –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.",
                reply_markup=back_markup
            )
            return WAITING_FOR_INPUT

        matches = await search_users_by_term(term)

        if not matches:
            back_markup = InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_users")]])
            try:
                await update.message.reply_text(
                    f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É `{escape_markdown(term)}` –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                    reply_markup=back_markup,
                    parse_mode="Markdown"
                )
            except Exception:
                await update.message.reply_text(
                    f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{term}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                    reply_markup=back_markup
                )
            return USER_MENU

        if len(matches) == 1:
            user = matches[0]
            try:
                message = format_user_details_safe(user)

                keyboard = [
                    [
                        InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ç—Ä–∞—Ñ–∏–∫", callback_data=f"reset_{user['uuid']}"),
                        InlineKeyboardButton("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{user['uuid']}")
                    ]
                ]

                if user.get('status') == 'ACTIVE':
                    keyboard.append([
                        InlineKeyboardButton("üî¥ –û—Ç–∫–ª—é—á–∏—Ç—å", callback_data=f"disable_{user['uuid']}"),
                        InlineKeyboardButton("üîÑ –û—Ç–æ–∑–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=f"revoke_{user['uuid']}")
                    ])
                else:
                    keyboard.append([
                        InlineKeyboardButton("üü¢ –í–∫–ª—é—á–∏—Ç—å", callback_data=f"enable_{user['uuid']}"),
                        InlineKeyboardButton("üîÑ –û—Ç–æ–∑–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=f"revoke_{user['uuid']}")
                    ])

                keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_users")])
                reply_markup = InlineKeyboardMarkup(keyboard)

                try:
                    await update.message.reply_text(
                        text=message,
                        reply_markup=reply_markup
                    )
                except Exception as e:
                    logger.error(f"Error sending formatted message with Markdown: {e}")
                    await update.message.reply_text(
                        text=message,
                        reply_markup=reply_markup
                    )

                context.user_data["current_user"] = user
                return SELECTING_USER
            except Exception as e:
                logger.error(f"Error formatting user details in search: {e}")
                keyboard = [[InlineKeyboardButton(f"üë§ {user.get('username', '–ë–µ–∑ –∏–º–µ–Ω–∏')}", callback_data=f"view_{user.get('uuid')}")]]
                keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_users")])
                reply_markup = InlineKeyboardMarkup(keyboard)

                await update.message.reply_text(
                    text=f"–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.get('username','–ë–µ–∑ –∏–º–µ–Ω–∏')}",
                    reply_markup=reply_markup
                )
                context.user_data["current_user"] = user
                return SELECTING_USER

        max_results = 10
        keyboard = []
        message_lines = [
            f"üîç –ù–∞–π–¥–µ–Ω–æ {len(matches)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É `{escape_markdown(term)}`:",
            ""
        ]

        for index, user in enumerate(matches[:max_results], 1):
            username = user.get('username') or '–ë–µ–∑ –∏–º–µ–Ω–∏'
            status = user.get('status') or 'UNKNOWN'
            message_lines.append(f"{index}. {escape_markdown(username)} ‚Äî {escape_markdown(str(status))}")
            user_uuid = user.get('uuid')
            if user_uuid:
                keyboard.append([InlineKeyboardButton(f"üë§ {username}", callback_data=f"view_{user_uuid}")])

        if len(matches) > max_results:
            message_lines.append("")
            message_lines.append(f"–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ {max_results} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –£—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞.")

        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_users")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        message_text = "\n".join(message_lines)

        try:
            await update.message.reply_text(
                text=message_text,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
        except Exception as e:
            logger.error(f"Error sending search results with Markdown: {e}")
            plain_text = message_text.replace('`', '')
            await update.message.reply_text(
                text=plain_text,
                reply_markup=reply_markup
            )

        return SELECTING_USER

    else:  # Text input
        field = context.user_data["edit_field"]
        user = context.user_data["edit_user"]
        value = update.message.text.strip()
        
        # Process the value based on the field
        if field == "expireAt":
            try:
                # Validate date format
                date_obj = datetime.strptime(value, "%Y-%m-%d")
                value = date_obj.strftime("%Y-%m-%dT00:00:00.000Z")
            except ValueError:
                keyboard = [
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"edit_{user['uuid']}")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD.",
                    reply_markup=reply_markup,
                    parse_mode="Markdown"
                )
                return EDIT_USER
        
        elif field == "trafficLimitBytes":
            try:
                value = int(value)
                if value < 0:
                    raise ValueError("Traffic limit cannot be negative")
            except ValueError:
                keyboard = [
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"edit_{user['uuid']}")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ >= 0.",
                    reply_markup=reply_markup,
                    parse_mode="Markdown"
                )
                return EDIT_USER
        
        elif field == "telegramId":
            try:
                value = int(value)
            except ValueError:
                keyboard = [
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"edit_{user['uuid']}")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram ID. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.",
                    reply_markup=reply_markup,
                    parse_mode="Markdown"
                )
                return EDIT_USER
                
        elif field == "hwidDeviceLimit":
            try:
                value = int(value)
                if value < 0:
                    raise ValueError("Device limit cannot be negative")
                
                # –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ª–∏–º–∏—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤ > 0, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±–Ω–æ–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ trafficLimitStrategy=NO_RESET
                if value > 0:
                    update_data["trafficLimitStrategy"] = "NO_RESET"
                    logger.info(f"Auto-setting trafficLimitStrategy=NO_RESET when setting hwidDeviceLimit to {value} for user {user['uuid']}")
            except ValueError:
                keyboard = [
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"edit_{user['uuid']}")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ >= 0.",
                    reply_markup=reply_markup,
                    parse_mode="Markdown"
                )
                return EDIT_USER
        
        # Update the user with the new value
        update_data = {field: value}
        result = await UserAPI.update_user(user["uuid"], update_data)
        
        if result:
            keyboard = [
                [InlineKeyboardButton("üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"view_{user['uuid']}")],
                [InlineKeyboardButton("üìù –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data=f"edit_{user['uuid']}")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_list")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"‚úÖ –ü–æ–ª–µ {field} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.",
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
        else:
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"edit_{user['uuid']}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª–µ {field}.",
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
        
        return EDIT_USER

@check_admin
async def start_create_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start creating a new user - first show template selection"""
    # Clear any previous user creation data
    context.user_data.pop("create_user", None)
    context.user_data.pop("create_user_fields", None)
    context.user_data.pop("current_field_index", None)
    context.user_data.pop("search_type", None)  # Clear search type to avoid confusion
    context.user_data.pop("using_template", None)
    
    # Initialize user creation data
    context.user_data["create_user"] = {}
    
    # Show template selection
    await show_template_selection(update, context)
    return CREATE_USER_FIELD

async def show_template_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show template selection menu"""
    from modules.utils.presets import get_template_names
    
    message = "üéØ *–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n"
    message += "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Ä—É—á–Ω—É—é:\n\n"
    message += "üìã *–ì–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã* —Å–æ–¥–µ—Ä–∂–∞—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
    message += "‚öôÔ∏è *–†—É—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ* –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ –æ—Ç–¥–µ–ª—å–Ω–æ"
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤
    keyboard = []
    templates = get_template_names()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ 2 –≤ —Ä—è–¥—É
    for i in range(0, len(templates), 2):
        row = []
        for j in range(2):
            if i + j < len(templates):
                template_name = templates[i + j]
                row.append(InlineKeyboardButton(
                    template_name, 
                    callback_data=f"template_{template_name}"
                ))
        keyboard.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard.extend([
        [InlineKeyboardButton("‚öôÔ∏è –°–æ–∑–¥–∞—Ç—å –≤—Ä—É—á–Ω—É—é", callback_data="create_manual")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_create")]
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            text=message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    else:
        await update.message.reply_text(
            text=message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )

async def handle_template_selection(update: Update, context: ContextTypes.DEFAULT_TYPE, template_name: str):
    """Handle template selection and show confirmation"""
    from modules.utils.presets import get_template_by_name, format_template_info
    
    template = get_template_by_name(template_name)
    if not template:
        await update.callback_query.edit_message_text(
            "‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            parse_mode="Markdown"
        )
        return CREATE_USER_FIELD
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω
    context.user_data["selected_template"] = template_name
    context.user_data["using_template"] = True
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–∞–±–ª–æ–Ω–µ
    message = "üìã *–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —à–∞–±–ª–æ–Ω–∞*\n\n"
    message += format_template_info(template_name)
    message += "\n\nüí° *–ß—Ç–æ –¥–∞–ª—å—à–µ?*\n"
    message += "‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω –∫–∞–∫ –µ—Å—Ç—å, —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–≤ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
    message += "‚Ä¢ –ò–ª–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (email, Telegram ID, —Ç–µ–≥ –∏ —Ç.–¥.)"
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω", callback_data=f"use_template_{template_name}")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ", callback_data=f"customize_template_{template_name}")],
        [InlineKeyboardButton("üîô –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —à–∞–±–ª–æ–Ω", callback_data="back_to_templates")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_create")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        text=message,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def start_template_creation(update: Update, context: ContextTypes.DEFAULT_TYPE, template_name: str, customize: bool = False):
    """Start user creation with selected template"""
    from modules.utils.presets import apply_template_to_user_data
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —à–∞–±–ª–æ–Ω
    context.user_data["create_user"] = apply_template_to_user_data({}, template_name)
    context.user_data["using_template"] = True
    context.user_data["template_name"] = template_name
    
    if customize:
        # –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ - –ø—Ä–æ—Ö–æ–¥–∏–º –≤—Å–µ –ø–æ–ª—è
        context.user_data["create_user_fields"] = list(USER_FIELDS.keys())
        context.user_data["current_field_index"] = 0
    else:
        # –¢–æ–ª—å–∫–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
        context.user_data["create_user_fields"] = ["username"]
        context.user_data["current_field_index"] = 0
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—è
    await ask_for_field(update, context)
    return CREATE_USER_FIELD

async def ask_for_field(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Ask for a field value when creating a user"""
    fields = context.user_data["create_user_fields"]
    index = context.user_data["current_field_index"]

    if index >= len(fields):
        # All fields collected, create the user
        return await finish_create_user(update, context)

    field = fields[index]
    field_name = USER_FIELDS[field]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ —à–∞–±–ª–æ–Ω
    using_template = context.user_data.get("using_template", False)
    current_value = context.user_data["create_user"].get(field)
    
    # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —à–∞–±–ª–æ–Ω –∏ –ø–æ–ª–µ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    template_info = ""
    if using_template and current_value is not None:
        if field == "trafficLimitBytes":
            from modules.utils.formatters import format_bytes
            display_value = "–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π" if current_value == 0 else format_bytes(current_value)
            template_info = f"\nüéØ *–ó–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —à–∞–±–ª–æ–Ω–∞:* {display_value}"
        elif field == "hwidDeviceLimit":
            if current_value == 0:
                display_value = "–ë–µ–∑ –ª–∏–º–∏—Ç–∞"
            elif current_value == 1:
                display_value = "1 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"
            elif current_value in [2, 3, 4]:
                display_value = f"{current_value} —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"
            else:
                display_value = f"{current_value} —É—Å—Ç—Ä–æ–π—Å—Ç–≤"
            template_info = f"\nüéØ *–ó–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —à–∞–±–ª–æ–Ω–∞:* {display_value}"
        elif field == "trafficLimitStrategy":
            strategy_map = {
                "NO_RESET": "–ë–µ–∑ —Å–±—Ä–æ—Å–∞",
                "DAY": "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ",
                "WEEK": "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ",
                "MONTH": "–ï–∂–µ–º–µ—Å—è—á–Ω–æ"
            }
            display_value = strategy_map.get(current_value, current_value)
            template_info = f"\nüéØ *–ó–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —à–∞–±–ª–æ–Ω–∞:* {display_value}"
        else:
            template_info = f"\nüéØ *–ó–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —à–∞–±–ª–æ–Ω–∞:* {current_value}"

    # Special handling for username when using template
    if field == "username":
        template_name = context.user_data.get("template_name", "")
        message = f"üë§ *–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n"
        if using_template:
            message += f"–í—ã–±—Ä–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω: {template_name}\n"
            message += "–í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (6-34 —Å–∏–º–≤–æ–ª–∞, —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è):"
        else:
            message += "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
        
        # –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if using_template and len(fields) == 1:  # –¢–æ–ª—å–∫–æ username –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª–µ–π
            keyboard = [
                [InlineKeyboardButton("‚úÖ –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="finish_template_user")],
                [InlineKeyboardButton("‚öôÔ∏è –î–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è", callback_data="add_optional_fields")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_create")]
            ]
        else:
            keyboard = [
                [InlineKeyboardButton("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_field")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_create")]
            ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)

    # Special handling for expireAt
    elif field == "expireAt":
        # Default to 30 days from now
        default_value = (datetime.now() + timedelta(days=30)).strftime("%Y-%m-%d")
        message = f"üìÖ *–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è*{template_info}\n\n"
        message += "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ—Å–µ—Ç–æ–≤ –Ω–∏–∂–µ:"
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ—Å–µ—Ç—ã –¥–∞—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–µ—Ä–∏–æ–¥–∞–º–∏
        today = datetime.now()
        keyboard = [
            [
                InlineKeyboardButton("1 –¥–µ–Ω—å", callback_data=f"create_date_{(today + timedelta(days=1)).strftime('%Y-%m-%d')}"),
                InlineKeyboardButton("3 –¥–Ω—è", callback_data=f"create_date_{(today + timedelta(days=3)).strftime('%Y-%m-%d')}"),
                InlineKeyboardButton("7 –¥–Ω–µ–π", callback_data=f"create_date_{(today + timedelta(days=7)).strftime('%Y-%m-%d')}")
            ],
            [
                InlineKeyboardButton("30 –¥–Ω–µ–π", callback_data=f"create_date_{(today + timedelta(days=30)).strftime('%Y-%m-%d')}"),
                InlineKeyboardButton("60 –¥–Ω–µ–π", callback_data=f"create_date_{(today + timedelta(days=60)).strftime('%Y-%m-%d')}"),
                InlineKeyboardButton("90 –¥–Ω–µ–π", callback_data=f"create_date_{(today + timedelta(days=90)).strftime('%Y-%m-%d')}")
            ],
            [
                InlineKeyboardButton("180 –¥–Ω–µ–π", callback_data=f"create_date_{(today + timedelta(days=180)).strftime('%Y-%m-%d')}"),
                InlineKeyboardButton("365 –¥–Ω–µ–π", callback_data=f"create_date_{(today + timedelta(days=365)).strftime('%Y-%m-%d')}")
            ],
            [InlineKeyboardButton("80 –ª–µ—Ç üëë", callback_data=f"create_date_{(today + timedelta(days=365*80)).strftime('%Y-%m-%d')}")],
            [InlineKeyboardButton("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_field")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_create")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                text=message,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
        else:
            await update.message.reply_text(
                text=message,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
        
        return CREATE_USER_FIELD
    
    # Special handling for trafficLimitBytes
    elif field == "trafficLimitBytes":
        message = f"üìà *–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ—Å–µ—Ç–æ–≤ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –±–∞–π—Ç–∞—Ö:"
        
        # –°–æ–∑–¥–∞—ë–º –ø—Ä–µ—Å–µ—Ç—ã —Ç—Ä–∞—Ñ–∏–∫–∞ —Å —à–∞–≥–æ–º –ø–æ 200 –ì–ë –¥–æ 1 –¢–ë (–∏ –¥—Ä—É–≥–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ)
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –±–∞–π—Ç—ã: —É–º–Ω–æ–∂–∞–µ–º –Ω–∞ 1024^3
        GB = 1024 * 1024 * 1024
        keyboard = [
            [
                InlineKeyboardButton("50 –ì–ë", callback_data=f"create_traffic_{50 * GB}"),
                InlineKeyboardButton("100 –ì–ë", callback_data=f"create_traffic_{100 * GB}"),
                InlineKeyboardButton("200 –ì–ë", callback_data=f"create_traffic_{200 * GB}")
            ],
            [
                InlineKeyboardButton("400 –ì–ë", callback_data=f"create_traffic_{400 * GB}"),
                InlineKeyboardButton("600 –ì–ë", callback_data=f"create_traffic_{600 * GB}"),
                InlineKeyboardButton("800 –ì–ë", callback_data=f"create_traffic_{800 * GB}")
            ],
            [
                InlineKeyboardButton("1 –¢–ë", callback_data=f"create_traffic_{1024 * GB}"),
                InlineKeyboardButton("2 –¢–ë", callback_data=f"create_traffic_{2048 * GB}"),
                InlineKeyboardButton("5 –¢–ë", callback_data=f"create_traffic_{5120 * GB}")
            ],
            [
                InlineKeyboardButton("–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π", callback_data="create_traffic_0")
            ],
            [InlineKeyboardButton("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_field")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_create")]
        ]
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.debug(f"Setting up traffic limit buttons with callback data: create_traffic_0 for unlimited")
        logger.debug(f"First button callback: {keyboard[0][0].callback_data}")
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                text=message,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
        else:
            await update.message.reply_text(
                text=message,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
        
        return CREATE_USER_FIELD

    # Special handling for description
    elif field == "description":
        message = f"üìù *–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —à–∞–±–ª–æ–Ω–æ–≤ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –æ–ø–∏—Å–∞–Ω–∏–µ:"
        
        # –°–æ–∑–¥–∞—ë–º —à–∞–±–ª–æ–Ω—ã –¥–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π
        keyboard = [
            [InlineKeyboardButton("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", callback_data="create_desc_–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")],
            [InlineKeyboardButton("VIP-–∫–ª–∏–µ–Ω—Ç", callback_data="create_desc_VIP-–∫–ª–∏–µ–Ω—Ç")],
            [InlineKeyboardButton("–¢–µ—Å—Ç–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç", callback_data="create_desc_–¢–µ—Å—Ç–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç")],
            [InlineKeyboardButton("–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –∫–ª–∏–µ–Ω—Ç", callback_data="create_desc_–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –∫–ª–∏–µ–Ω—Ç")],
            [InlineKeyboardButton("–î–µ–º–æ-–∞–∫–∫–∞—É–Ω—Ç", callback_data="create_desc_–î–µ–º–æ-–∞–∫–∫–∞—É–Ω—Ç")],
            [InlineKeyboardButton("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_field")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_create")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                text=message,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
        else:
            await update.message.reply_text(
                text=message,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
        
        return CREATE_USER_FIELD
    
    # Special handling for hwidDeviceLimit
    elif field == "hwidDeviceLimit":
        message = f"üì± *–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏–º–∏—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ—Å–µ—Ç–æ–≤ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∑–Ω–∞—á–µ–Ω–∏–µ:"
        
        # –°–æ–∑–¥–∞—ë–º –ø—Ä–µ—Å–µ—Ç—ã –¥–ª—è –ª–∏–º–∏—Ç–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        keyboard = [
            [
                InlineKeyboardButton("1 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", callback_data="create_device_1"),
                InlineKeyboardButton("2 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", callback_data="create_device_2"),
                InlineKeyboardButton("3 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", callback_data="create_device_3")
            ],
            [
                InlineKeyboardButton("4 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", callback_data="create_device_4"),
                InlineKeyboardButton("5 —É—Å—Ç—Ä–æ–π—Å—Ç–≤", callback_data="create_device_5"),
                InlineKeyboardButton("10 —É—Å—Ç—Ä–æ–π—Å—Ç–≤", callback_data="create_device_10")
            ],
            [
                InlineKeyboardButton("–ë–µ–∑ –ª–∏–º–∏—Ç–∞ (0)", callback_data="create_device_0")
            ],
            [InlineKeyboardButton("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_field")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_create")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                text=message,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
        else:
            await update.message.reply_text(
                text=message,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
        
        return CREATE_USER_FIELD
        
    # Special handling for trafficLimitStrategy
    elif field == "trafficLimitStrategy":
        keyboard = [
            [InlineKeyboardButton("NO_RESET - –ë–µ–∑ —Å–±—Ä–æ—Å–∞", callback_data="create_field_NO_RESET")],
            [InlineKeyboardButton("DAY - –ï–∂–µ–¥–Ω–µ–≤–Ω–æ", callback_data="create_field_DAY")],
            [InlineKeyboardButton("WEEK - –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ", callback_data="create_field_WEEK")],
            [InlineKeyboardButton("MONTH - –ï–∂–µ–º–µ—Å—è—á–Ω–æ", callback_data="create_field_MONTH")],
            [InlineKeyboardButton("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_field")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = f"üîÑ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å–±—Ä–æ—Å–∞ —Ç—Ä–∞—Ñ–∏–∫–∞:"
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                text=message,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
        else:
            await update.message.reply_text(
                text=message,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
        
        return CREATE_USER_FIELD

    else:
        message = f"–í–≤–µ–¥–∏—Ç–µ {field_name}:{template_info}"

    keyboard = [[InlineKeyboardButton("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_field")]]

    # –î–ª—è —à–∞–±–ª–æ–Ω–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —à–∞–±–ª–æ–Ω–∞"
    if using_template and current_value is not None and field not in ["username"]:
        if field == "trafficLimitBytes":
            display_value = "–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π" if current_value == 0 else format_bytes(current_value)
            keyboard.insert(0, [InlineKeyboardButton(f"‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å: {display_value}", callback_data=f"use_template_value_{field}")])
        elif field == "hwidDeviceLimit":
            if current_value == 0:
                display_value = "–ë–µ–∑ –ª–∏–º–∏—Ç–∞"
            elif current_value == 1:
                display_value = "1 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"
            elif current_value in [2, 3, 4]:
                display_value = f"{current_value} —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"
            else:
                display_value = f"{current_value} —É—Å—Ç—Ä–æ–π—Å—Ç–≤"
            keyboard.insert(0, [InlineKeyboardButton(f"‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å: {display_value}", callback_data=f"use_template_value_{field}")])
        elif field == "trafficLimitStrategy":
            strategy_map = {
                "NO_RESET": "–ë–µ–∑ —Å–±—Ä–æ—Å–∞",
                "DAY": "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ", 
                "WEEK": "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ",
                "MONTH": "–ï–∂–µ–º–µ—Å—è—á–Ω–æ"
            }
            display_value = strategy_map.get(current_value, current_value)
            keyboard.insert(0, [InlineKeyboardButton(f"‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å: {display_value}", callback_data=f"use_template_value_{field}")])
        else:
            keyboard.insert(0, [InlineKeyboardButton(f"‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å: {current_value}", callback_data=f"use_template_value_{field}")])

    # Add cancel button
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_create")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        await update.callback_query.edit_message_text(
            text=message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    else:
        await update.message.reply_text(
            text=message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )

    return CREATE_USER_FIELD

@check_admin
async def handle_create_user_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle user input when creating a user"""
    query = update.callback_query

    if query:
        await query.answer()
        data = query.data
        
        if data == "skip_field":
            # Skip this field
            context.user_data["current_field_index"] += 1
            await ask_for_field(update, context)
            return CREATE_USER_FIELD
        
        # elif data == "cancel_create":
        #     # Cancel user creation - handled by separate handler
        #     await show_users_menu(update, context)
        #     return USER_MENU
        
        elif data == "back_to_main":
            # Return to main menu
            await show_main_menu(update, context)
            return MAIN_MENU
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞
        elif data.startswith("template_"):
            template_name = data[9:]  # —É–±–∏—Ä–∞–µ–º "template_"
            await handle_template_selection(update, context, template_name)
            return CREATE_USER_FIELD
        
        elif data == "create_manual":
            # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä—É—á–Ω—É—é - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π
            context.user_data["create_user_fields"] = list(USER_FIELDS.keys())
            context.user_data["current_field_index"] = 0
            context.user_data["using_template"] = False
            await ask_for_field(update, context)
            return CREATE_USER_FIELD
        
        elif data == "back_to_templates":
            await show_template_selection(update, context)
            return CREATE_USER_FIELD
        
        elif data.startswith("use_template_"):
            template_name = data[13:]  # —É–±–∏—Ä–∞–µ–º "use_template_"
            await start_template_creation(update, context, template_name, customize=False)
            return CREATE_USER_FIELD
        
        elif data.startswith("customize_template_"):
            template_name = data[19:]  # —É–±–∏—Ä–∞–µ–º "customize_template_"
            await start_template_creation(update, context, template_name, customize=True)
            return CREATE_USER_FIELD
        
        elif data == "finish_template_user":
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —à–∞–±–ª–æ–Ω–æ–º
            return await finish_create_user(update, context)
        
        elif data == "add_optional_fields":
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            optional_fields = ["telegramId", "email", "tag", "expireAt"]
            current_fields = context.user_data["create_user_fields"]
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã—Ö –µ—â–µ –Ω–µ—Ç
            for field in optional_fields:
                if field not in current_fields:
                    current_fields.append(field)
            context.user_data["create_user_fields"] = current_fields
            context.user_data["current_field_index"] += 1  # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–ª—é
            await ask_for_field(update, context)
            return CREATE_USER_FIELD
        
        elif data.startswith("use_template_value_"):
            # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –ø–æ–ª—è
            field_name = data[19:]  # —É–±–∏—Ä–∞–µ–º "use_template_value_"
            # –ó–Ω–∞—á–µ–Ω–∏–µ —É–∂–µ –µ—Å—Ç—å –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —à–∞–±–ª–æ–Ω–∞
            context.user_data["current_field_index"] += 1
            await ask_for_field(update, context)
            return CREATE_USER_FIELD
        
        elif data.startswith("create_field_"):
            # Handle selection for fields with predefined values
            value = data[13:]  # –ë–µ—Ä–µ–º –≤—Å—ë, —á—Ç–æ –∏–¥–µ—Ç –ø–æ—Å–ª–µ "create_field_", —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ–±—Ä–µ–∑–∞–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
            fields = context.user_data["create_user_fields"]
            index = context.user_data["current_field_index"]
            field = fields[index]
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –∫–∞–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è
            logger.info(f"Setting field {field} to value '{value}' from callback data '{data}'")
            
            context.user_data["create_user"][field] = value
            context.user_data["current_field_index"] += 1
            await ask_for_field(update, context)
            return CREATE_USER_FIELD
            
        elif data.startswith("create_date_"):
            # Handle selection for date presets
            date_str = data[12:] # –ü–æ–ª—É—á–∞–µ–º YYYY-MM-DD –∏–∑ –∫–æ–ª–ª–±—ç–∫–∞
            fields = context.user_data["create_user_fields"]
            index = context.user_data["current_field_index"]
            field = fields[index]
            
            if field == "expireAt":
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                try:
                    date_obj = datetime.strptime(date_str, "%Y-%m-%d")
                    value = date_obj.strftime("%Y-%m-%dT00:00:00.000Z")
                    context.user_data["create_user"][field] = value
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–µ
                    await query.edit_message_text(
                        f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è: {date_str}",
                        parse_mode="Markdown"
                    )
                    
                    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–ª—é
                    context.user_data["current_field_index"] += 1
                    await ask_for_field(update, context)
                except ValueError as e:
                    logger.error(f"Error parsing date: {e}")
                    await query.edit_message_text(
                        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é.",
                        parse_mode="Markdown"
                    )
            
            return CREATE_USER_FIELD
            
        elif data.startswith("create_traffic_"):
            # Handle selection for traffic limit presets
            try:
                # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ª–æ–≥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                logger.debug(f"Processing traffic selection with data: '{data}'")
                
                # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –±–∞–π—Ç–∞—Ö –∏–∑ –∫–æ–ª–ª–±—ç–∫–∞
                traffic_bytes_str = data[14:]  # –æ—Ç—Ä–µ–∑–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å 'create_traffic_'
                logger.debug(f"Extracted traffic value string: '{traffic_bytes_str}'")
                
                fields = context.user_data["create_user_fields"]
                index = context.user_data["current_field_index"]
                field = fields[index]
                
                if field == "trafficLimitBytes":
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —á–∏—Å–ª–æ, –∏–≥–Ω–æ—Ä–∏—Ä—É—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
                    sanitized_value = traffic_bytes_str.strip().replace(' ', '').replace(',', '')
                    sanitized_value = sanitized_value.lstrip('_')
                    sanitized_value = ''.join(ch for ch in sanitized_value if ch.isdigit())
                    value = int(sanitized_value) if sanitized_value else 0
                    context.user_data["create_user"][field] = value
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
                    from modules.utils.formatters import format_bytes
                    readable_value = format_bytes(value)
                    
                    # –î–ª—è –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞ (0) –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–æ–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    if value == 0:
                        readable_value = "–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π"
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ª–∏–º–∏—Ç–µ
                    await query.edit_message_text(
                        f"‚úÖ –í—ã–±—Ä–∞–Ω –ª–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞: {readable_value}",
                        parse_mode="Markdown"
                    )
                    
                    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–ª—é
                    context.user_data["current_field_index"] += 1
                    await ask_for_field(update, context)
            except ValueError as e:
                logger.error(f"Error parsing traffic limit: {e}")
                await query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–∏–º–∏—Ç–∞ —Ç—Ä–∞—Ñ–∏–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é.",
                    parse_mode="Markdown"
                )
            except Exception as e:
                logger.error(f"Unexpected error processing traffic limit: {e}", exc_info=True)
                await query.edit_message_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    parse_mode="Markdown"
                )
            
            return CREATE_USER_FIELD
            
        elif data.startswith("create_desc_"):
            try:
                # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ª–æ–≥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                logger.debug(f"Processing description template with data: '{data}'")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑ –∫–æ–ª–ª–±—ç–∫–∞
                description = data[12:]  # –æ—Ç—Ä–µ–∑–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å 'create_desc_'
                logger.debug(f"Extracted description: '{description}'")
                
                fields = context.user_data["create_user_fields"]
                index = context.user_data["current_field_index"]
                field = fields[index]
                
                if field == "description":
                    context.user_data["create_user"][field] = description
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —à–∞–±–ª–æ–Ω–µ
                    await query.edit_message_text(
                        f"‚úÖ –í—ã–±—Ä–∞–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ: {description}",
                        parse_mode="Markdown"
                    )
                    
                    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–ª—é
            except Exception as e:
                logger.error(f"Unexpected error processing description template: {e}", exc_info=True)
                await query.edit_message_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —à–∞–±–ª–æ–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Ä—É—á–Ω—É—é.",
                    parse_mode="Markdown"
                )
                context.user_data["current_field_index"] += 1
                await ask_for_field(update, context)
            
            return CREATE_USER_FIELD
            
        elif data.startswith("create_device_"):
            # Handle selection for device limit presets
            try:
                # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ª–æ–≥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                logger.debug(f"Processing device limit selection with data: '{data}'")
                
                # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏–∑ –∫–æ–ª–ª–±—ç–∫–∞
                device_limit_str = data[14:]  # –æ—Ç—Ä–µ–∑–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å 'create_device_'
                logger.debug(f"Extracted device limit value string: '{device_limit_str}'")
                
                fields = context.user_data["create_user_fields"]
                index = context.user_data["current_field_index"]
                field = fields[index]
                
                if field == "hwidDeviceLimit":
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —á–∏—Å–ª–æ
                    value = int(device_limit_str)
                    context.user_data["create_user"][field] = value
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —á–∏—Ç–∞–µ–º–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ (—Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ–º –¥–ª—è —á–∏—Å–ª–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤)
                    if value == 0:
                        readable_value = "–ë–µ–∑ –ª–∏–º–∏—Ç–∞"
                    elif value == 1:
                        readable_value = "1 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"
                    elif value in [2, 3, 4]:
                        readable_value = f"{value} —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"
                    else:
                        readable_value = f"{value} —É—Å—Ç—Ä–æ–π—Å—Ç–≤"
                    
                    # –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏–º–∏—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤ > 0, –Ω—É–∂–Ω–æ —Ç–∞–∫–∂–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å trafficLimitStrategy = NO_RESET
                    if value > 0:
                        # –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é NO_RESET
                        context.user_data["create_user"]["trafficLimitStrategy"] = "NO_RESET"
                        logger.info(f"Auto-setting trafficLimitStrategy=NO_RESET for user with hwidDeviceLimit={value}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ª–∏–º–∏—Ç–µ
                    await query.edit_message_text(
                        f"‚úÖ –í—ã–±—Ä–∞–Ω –ª–∏–º–∏—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {readable_value}",
                        parse_mode="Markdown"
                    )
                    
                    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–ª—é
                    context.user_data["current_field_index"] += 1
                    await ask_for_field(update, context)
            except ValueError as e:
                logger.error(f"Error parsing device limit: {e}")
                await query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–∏–º–∏—Ç–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é.",
                    parse_mode="Markdown"
                )
            except Exception as e:
                logger.error(f"Unexpected error processing device limit: {e}", exc_info=True)
                await query.edit_message_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    parse_mode="Markdown"
                )
            
            return CREATE_USER_FIELD

    else:  # Text input
        try:
            fields = context.user_data["create_user_fields"]
            index = context.user_data["current_field_index"]
            field = fields[index]
            value = update.message.text.strip()
            
            # Process the value based on the field
            if field == "username":
                # Validate username format
                if not re.match(r"^[a-zA-Z0-9_-]{6,34}$", value):
                    keyboard = [[InlineKeyboardButton("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_field")]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    await update.message.reply_text(
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –∏ –¥–µ—Ñ–∏—Å—ã. –î–ª–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 6 –¥–æ 34 —Å–∏–º–≤–æ–ª–æ–≤.",
                        reply_markup=reply_markup,
                        parse_mode="Markdown"
                    )
                    return CREATE_USER_FIELD
            
            elif field == "expireAt":
                try:
                    # Validate date format
                    date_obj = datetime.strptime(value, "%Y-%m-%d")
                    value = date_obj.strftime("%Y-%m-%dT00:00:00.000Z")
                except ValueError:
                    keyboard = [[InlineKeyboardButton("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_field")]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    await update.message.reply_text(
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD.",
                        reply_markup=reply_markup,
                        parse_mode="Markdown"
                    )
                    return CREATE_USER_FIELD
            
            elif field == "trafficLimitBytes":
                try:
                    value = int(value)
                    if value < 0:
                        raise ValueError("Traffic limit cannot be negative")
                except ValueError:
                    keyboard = [[InlineKeyboardButton("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_field")]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    await update.message.reply_text(
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ >= 0.",
                        reply_markup=reply_markup,
                        parse_mode="Markdown"
                    )
                    return CREATE_USER_FIELD
            
            elif field == "telegramId":
                try:
                    value = int(value)
                except ValueError:
                    keyboard = [[InlineKeyboardButton("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_field")]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    await update.message.reply_text(
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram ID. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.",
                        reply_markup=reply_markup,
                        parse_mode="Markdown"
                    )
                    return CREATE_USER_FIELD
            
            elif field == "tag":
                if value and not re.match(r"^[A-Z0-9_]{1,16}$", value):
                    keyboard = [[InlineKeyboardButton("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_field")]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    await update.message.reply_text(
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–≥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –ó–ê–ì–õ–ê–í–ù–´–ï –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ - 16 —Å–∏–º–≤–æ–ª–æ–≤.",
                        reply_markup=reply_markup,
                        parse_mode="Markdown"
                    )
                    return CREATE_USER_FIELD
            
            elif field == "email":
                if value and not re.match(r"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$", value):
                    keyboard = [[InlineKeyboardButton("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_field")]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    await update.message.reply_text(
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email.",
                        reply_markup=reply_markup,
                        parse_mode="Markdown"
                    )
                    return CREATE_USER_FIELD
                    
            elif field == "hwidDeviceLimit":
                try:
                    value = int(value)
                    if value < 0:
                        raise ValueError("Device limit cannot be negative")
                    
                    # –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏–º–∏—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤ > 0, –Ω—É–∂–Ω–æ —Ç–∞–∫–∂–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å trafficLimitStrategy = NO_RESET
                    if value > 0:
                        # –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é NO_RESET
                        context.user_data["create_user"]["trafficLimitStrategy"] = "NO_RESET"
                        logger.info(f"Auto-setting trafficLimitStrategy=NO_RESET for user with hwidDeviceLimit={value}")
                except ValueError:
                    keyboard = [[InlineKeyboardButton("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_field")]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    await update.message.reply_text(
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ >= 0.",
                        reply_markup=reply_markup,
                        parse_mode="Markdown"
                    )
                    return CREATE_USER_FIELD
            
            # Store the value and move to the next field
            context.user_data["create_user"][field] = value
            
            # –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ª–∏–º–∏—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤, –ø—Ä–æ–≤–µ—Ä–∏–º –∏ —É—Å—Ç–∞–Ω–æ–≤–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Ç—Ä–∞—Ñ–∏–∫–∞
            if field == "hwidDeviceLimit" and isinstance(value, int) and value > 0:
                context.user_data["create_user"]["trafficLimitStrategy"] = "NO_RESET"
                logger.info(f"Setting trafficLimitStrategy=NO_RESET because hwidDeviceLimit={value}")
                
            context.user_data["current_field_index"] += 1
            
            # Log the current state of the user creation data
            logger.debug(f"Current user creation data: {context.user_data['create_user']}")
            
            # Ask for the next field
            await ask_for_field(update, context)
            return CREATE_USER_FIELD
            
        except Exception as e:
            # Handle any unexpected errors
            logger.error(f"Error in handle_create_user_input: {e}")
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_users")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–æ–¥–∞: {str(e)}",
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
            return USER_MENU

async def finish_create_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Finish creating a user"""
    user_data = context.user_data["create_user"]

    # Generate random username if not provided (20 characters, alphanumeric)
    if "username" not in user_data or not user_data["username"]:
        characters = string.ascii_letters + string.digits
        random_username = ''.join(random.choice(characters) for _ in range(20))
        user_data["username"] = random_username
        logger.info(f"Generated random username: {random_username}")

    # Set default values for required fields if not provided
    if "trafficLimitStrategy" not in user_data:
        user_data["trafficLimitStrategy"] = "NO_RESET"
    
    # Set default traffic limit (100 GB in bytes) if not provided
    if "trafficLimitBytes" not in user_data:
        user_data["trafficLimitBytes"] = 100 * 1024 * 1024 * 1024  # 100 GB in bytes
    
    # Set default device limit if not provided
    if "hwidDeviceLimit" not in user_data:
        user_data["hwidDeviceLimit"] = 1
    
    # Set default description if not provided
    if "description" not in user_data or not user_data["description"]:
        user_data["description"] = f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    
    # Set default reset day if not provided
    if "resetDay" not in user_data:
        user_data["resetDay"] = 1

    # –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏–º–∏—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (hwidDeviceLimit), —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–±—Ä–æ—Å–∞ —Ç—Ä–∞—Ñ–∏–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    if "hwidDeviceLimit" in user_data and user_data.get("hwidDeviceLimit", 0) > 0:
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º NO_RESET –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –ª–∏–º–∏—Ç–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        user_data["trafficLimitStrategy"] = "NO_RESET"
        logger.info(f"Setting trafficLimitStrategy=NO_RESET for user with hwidDeviceLimit={user_data['hwidDeviceLimit']}")

    if "expireAt" not in user_data:
        # Default to 30 days from now
        user_data["expireAt"] = (datetime.now() + timedelta(days=30)).strftime("%Y-%m-%dT00:00:00.000Z")

    # Log data for debugging
    logger.debug(f"Creating user with data: {user_data}")
    logger.info(f"Creating user with trafficLimitStrategy: {user_data.get('trafficLimitStrategy')}")

    # Create the user
    result = await UserAPI.create_user(user_data)

    if result:
        keyboard = [
            [InlineKeyboardButton("üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"view_{result['uuid']}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
        message += f"üë§ –ò–º—è: {escape_markdown(result.get('username',''))}\n"
        message += f"üÜî UUID: `{result.get('uuid','')}`\n"
        if result.get('shortUuid'):
            message += f"üîë –ö–æ—Ä–æ—Ç–∫–∏–π UUID: `{result['shortUuid']}`\n"
        # v208 –º–æ–∂–µ—Ç –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å subscriptionUuid ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ URL, –µ—Å–ª–∏ –µ—Å—Ç—å
        if result.get('subscriptionUrl'):
            message += f"\nüîó URL –ø–æ–¥–ø–∏—Å–∫–∏: `{result['subscriptionUrl']}`\n"
        # Clear creation context now that user is created
        for key in ("create_user", "create_user_fields", "current_field_index", "using_template", "search_type", "waiting_for"):
            context.user_data.pop(key, None)

        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                text=message,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
        else:
            await update.message.reply_text(
                text=message,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
        
        return SELECTING_USER
    else:
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="create_user")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        error_message = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. "
        
        # Check for specific validation errors
        if "username" not in user_data:
            error_message += "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
        elif "trafficLimitStrategy" not in user_data:
            error_message += "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–±—Ä–æ—Å–∞ —Ç—Ä–∞—Ñ–∏–∫–∞."
        elif "expireAt" not in user_data:
            error_message += "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è."
        else:
            error_message += "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                text=error_message,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
        else:
            await update.message.reply_text(
                text=error_message,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
        
        return MAIN_MENU

async def show_user_hwid_devices(update: Update, context: ContextTypes.DEFAULT_TYPE, uuid: str):
    """Show user HWID devices"""
    devices = await UserAPI.get_user_hwid_devices(uuid)
    user = context.user_data.get("current_user") or await UserAPI.get_user_by_uuid(uuid)
    
    if not devices:
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", callback_data=f"add_hwid_{uuid}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"view_{uuid}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            f"üì± *–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ HWID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {escape_markdown(user['username'])}*\n\n"
            f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        return SELECTING_USER
    
    message = f"üì± *–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ HWID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {escape_markdown(user['username'])}*\n\n"
    
    for i, device in enumerate(devices):
        message += f"{i+1}. HWID: `{device['hwid']}`\n"
        if device.get("platform"):
            message += f"   üì± –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {escape_markdown(device['platform'])}\n"
        if device.get("osVersion"):
            message += f"   üñ•Ô∏è –í–µ—Ä—Å–∏—è –û–°: {escape_markdown(device['osVersion'])}\n"
        if device.get("deviceModel"):
            message += f"   üì± –ú–æ–¥–µ–ª—å: {escape_markdown(device['deviceModel'])}\n"
        if device.get("createdAt"):
            message += f"   üïí –î–æ–±–∞–≤–ª–µ–Ω–æ: {device['createdAt'][:10]}\n"
        message += "\n"
    
    # Add action buttons
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", callback_data=f"add_hwid_{uuid}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"view_{uuid}")]
    ]
    
    # Add delete buttons for each device
    for i, device in enumerate(devices):
        keyboard.append([
            InlineKeyboardButton(f"‚ùå –£–¥–∞–ª–∏—Ç—å {i+1}", callback_data=f"del_hwid_{uuid}_{device['hwid']}")
        ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        text=message,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    return SELECTING_USER

async def show_user_stats(update: Update, context: ContextTypes.DEFAULT_TYPE, uuid):
    """Show user statistics"""
    user = context.user_data.get("current_user") or await UserAPI.get_user_by_uuid(uuid)
    
    # Get usage for last 30 days
    end_date = datetime.now().strftime("%Y-%m-%dT%H:%M:%S.000Z")
    start_date = (datetime.now() - timedelta(days=30)).strftime("%Y-%m-%dT%H:%M:%S.000Z")
    
    usage = await UserAPI.get_user_usage_by_range(uuid, start_date, end_date)
    
    if not usage:
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"view_{uuid}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            f"‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {escape_markdown(user['username'])}",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        return SELECTING_USER
    
    message = f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {escape_markdown(user['username'])}*\n\n"
    
    # Current usage
    message += f"üìà *–¢–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ*:\n"
    message += f"  ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {format_bytes(user['usedTrafficBytes'])}\n"
    message += f"  ‚Ä¢ –õ–∏–º–∏—Ç: {format_bytes(user['trafficLimitBytes'])}\n"
    
    if user['trafficLimitBytes'] > 0:
        percent = (user['usedTrafficBytes'] / user['trafficLimitBytes']) * 100
        message += f"  ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç: {percent:.2f}%\n"
    
    message += f"  ‚Ä¢ –ó–∞ –≤—Å–µ –≤—Ä–µ–º—è: {format_bytes(user['lifetimeUsedTrafficBytes'])}\n\n"
    
    # Usage by node
    if usage:
        message += f"üìä *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ —Å–µ—Ä–≤–µ—Ä–∞–º (–∑–∞ 30 –¥–Ω–µ–π)*:\n"
        
        # Group by node
        node_usage = {}
        for entry in usage:
            node_uuid = entry.get("nodeUuid")
            node_name = entry.get("nodeName", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–µ—Ä")
            total = entry.get("total", 0)
            
            if node_uuid not in node_usage:
                node_usage[node_uuid] = {
                    "name": node_name,
                    "total": 0
                }
            
            node_usage[node_uuid]["total"] += total
        
        # Sort by usage
        sorted_nodes = sorted(node_usage.values(), key=lambda x: x["total"], reverse=True)
        
        for i, node in enumerate(sorted_nodes):
            message += f"  ‚Ä¢ {escape_markdown(node['name'])}: {format_bytes(node['total'])}\n"
    
    # Add action buttons
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"view_{uuid}")],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data=f"stats_{uuid}")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        text=message,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    return SELECTING_USER

async def start_add_hwid(update: Update, context: ContextTypes.DEFAULT_TYPE, uuid):
    """Start adding a HWID device"""
    user = context.user_data.get("current_user") or await UserAPI.get_user_by_uuid(uuid)
    
    context.user_data["add_hwid_uuid"] = uuid
    
    keyboard = [[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data=f"hwid_{uuid}")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        f"üì± *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ HWID –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {escape_markdown(user['username'])}*\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ HWID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    context.user_data["waiting_for"] = "hwid"
    return WAITING_FOR_INPUT

async def delete_hwid_device(update: Update, context: ContextTypes.DEFAULT_TYPE, uuid, hwid):
    """Delete a HWID device"""
    user = context.user_data.get("current_user") or await UserAPI.get_user_by_uuid(uuid)
    
    # Confirm deletion
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_del_hwid_{uuid}_{hwid}"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"hwid_{uuid}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        f"‚ö†Ô∏è *–£–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ HWID*\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å HWID `{hwid}` "
        f"–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {escape_markdown(user['username'])}?",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    return SELECTING_USER

async def confirm_delete_hwid_device(update: Update, context: ContextTypes.DEFAULT_TYPE, uuid, hwid):
    """Confirm and delete a HWID device"""
    result = await UserAPI.delete_user_hwid_device(uuid, hwid)
    
    if result:
        message = f"‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å HWID `{hwid}` —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ."
    else:
        message = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å HWID `{hwid}`."
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º", callback_data=f"hwid_{uuid}")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        message,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    return SELECTING_USER

async def handle_hwid_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle HWID input"""
    uuid = context.user_data.get("add_hwid_uuid")
    if not uuid:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: UUID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return SELECTING_USER
    
    hwid = update.message.text.strip()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
    result = await UserAPI.add_user_hwid_device(uuid, hwid)
    
    if result:
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º", callback_data=f"hwid_{uuid}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å HWID `{hwid}` —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    else:
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º", callback_data=f"hwid_{uuid}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å HWID `{hwid}`.",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    
    return SELECTING_USER

def register_user_handlers(application):
    """Register user handlers"""
    # This function would register all the user-related handlers
    pass
async def confirm_delete_user(update: Update, context: ContextTypes.DEFAULT_TYPE, uuid: str):
    """Show button-based confirmation for user deletion."""
    try:
        user = await UserAPI.get_user_by_uuid(uuid)
        if not user:
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_users")]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.callback_query.edit_message_text(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=reply_markup
            )
            return USER_MENU

        context.user_data["delete_user"] = user
        context.user_data["action"] = "delete"
        context.user_data["uuid"] = uuid

        message_lines = [
            "üö® *–í–ù–ò–ú–ê–ù–ò–ï! –£–î–ê–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø* üö®",
            "",
            "‚ö†Ô∏è –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å **–ù–ê–í–°–ï–ì–î–ê** —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            f"üë§ **–ò–º—è:** `{escape_markdown(user['username'])}`",
            f"üÜî **UUID:** `{user['uuid']}`",
            f"üìä **–°—Ç–∞—Ç—É—Å:** {user['status']}",
            f"üìà **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç—Ä–∞—Ñ–∏–∫–∞:** {format_bytes(user['usedTrafficBytes'])}",
            f"üìÖ **–î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è:** {user.get('expireAt', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')[:10]}",
            "",
            "üíÄ **–≠–¢–û –î–ï–ô–°–¢–í–ò–ï –ù–ï–õ–¨–ó–Ø –û–¢–ú–ï–ù–ò–¢–¨!**",
            "–ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ HWID, –∏—Å—Ç–æ—Ä–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
            "",
            "üõ°Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:"
        ]

        keyboard = [
            [InlineKeyboardButton("üóëÔ∏è –î–∞, —É–¥–∞–ª–∏—Ç—å –Ω–∞–≤—Å–µ–≥–¥–∞", callback_data="final_delete_user")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"view_{uuid}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        try:
            await update.callback_query.edit_message_text(
                text="\n".join(message_lines),
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
        except Exception as send_error:
            logger.error(f"Error sending deletion confirmation message: {send_error}")
            await update.callback_query.edit_message_text(
                text="\n".join(message_lines),
                reply_markup=reply_markup
            )

        return CONFIRM_ACTION

    except Exception as e:
        logger.error(f"Error in confirm_delete_user: {e}")
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_users")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.callback_query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
            reply_markup=reply_markup
        )
        return USER_MENU

async def execute_user_deletion(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Execute the actual user deletion"""
    try:
        user_to_delete = context.user_data.get("delete_user")
        if not user_to_delete:
            await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return USER_MENU
        
        uuid = user_to_delete['uuid']
        username = user_to_delete['username']
        
        # Show deletion in progress
        await update.callback_query.edit_message_text(
            f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è `{escape_markdown(username)}`...\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
            parse_mode="Markdown"
        )
        
        # Perform the deletion
        result = await UserAPI.delete_user(uuid)
        
        # Clear stored deletion data
        context.user_data.pop("delete_user", None)
        context.user_data.pop("action", None)
        context.user_data.pop("uuid", None)
        context.user_data.pop("waiting_for", None)
        
        if result:
            keyboard = [
                [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="list_users")],
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(
                f"‚úÖ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!**\n\n"
                f"üë§ –ò–º—è: `{escape_markdown(username)}`\n"
                f"üÜî UUID: `{uuid}`\n\n"
                f"üóëÔ∏è –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –Ω–∞–≤—Å–µ–≥–¥–∞.",
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
            
            # Log the deletion for audit purposes
            logger.warning(f"User deleted: {username} (UUID: {uuid}) by admin {update.effective_user.id}")
            
        else:
            keyboard = [
                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"user_action_delete_{uuid}")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="list_users")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(
                f"‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!**\n\n"
                f"üë§ –ò–º—è: `{escape_markdown(username)}`\n"
                f"üÜî UUID: `{uuid}`\n\n"
                f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É–¥–∞–ª–µ–Ω\n"
                f"‚Ä¢ –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º\n"
                f"‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
        
        return USER_MENU
        
    except Exception as e:
        logger.error(f"Error in execute_user_deletion: {e}")
        
        # Clear stored deletion data
        context.user_data.pop("delete_user", None)
        context.user_data.pop("action", None)
        context.user_data.pop("uuid", None)
        context.user_data.pop("waiting_for", None)
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="list_users")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            f"‚ùå **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!**\n\n"
            f"–û—à–∏–±–∫–∞: `{str(e)}`\n\n"
            f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã.",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
        return USER_MENU


async def start_edit_user(update: Update, context: ContextTypes.DEFAULT_TYPE, uuid: str):
    """Start editing a user"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if not check_authorization(update.effective_user):
        await update.callback_query.answer("‚õî –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.", show_alert=True)
        return ConversationHandler.END
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await UserAPI.get_user_by_uuid(uuid)
    if not user:
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_users")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.edit_message_text(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=reply_markup
        )
        return USER_MENU
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    context.user_data["edit_user"] = user
    context.user_data["edit_field"] = None
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    keyboard = []
    for field_key, field_name in USER_FIELDS.items():
        if field_key in user:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            keyboard.append([InlineKeyboardButton(f"üìù {field_name}", callback_data=f"edit_field_{field_key}")])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"view_{uuid}")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = f"üìù *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {escape_markdown(user['username'])}*\n\n"
    message += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
    
    await update.callback_query.edit_message_text(
        text=message,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    return EDIT_USER

@check_admin
async def handle_edit_field_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle edit field selection"""
    query = update.callback_query
    await query.answer()
    
    data = query.data

    if data.startswith("edit_field_"):
        field = data[11:]  # —É–±–∏—Ä–∞–µ–º "edit_field_"
        user = context.user_data["edit_user"]
        
        if field not in user:
            await query.edit_message_text("‚ùå –ü–æ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return EDIT_USER
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª–µ
        context.user_data["edit_field"] = field
        field_name = USER_FIELDS.get(field, field)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ
        current_value = user[field]
        if field == "trafficLimitBytes":
            from modules.utils.formatters import format_bytes
            display_value = "–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π" if current_value == 0 else format_bytes(current_value)
        elif field == "expireAt":
            display_value = current_value[:10] if current_value else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        else:
            display_value = str(current_value) if current_value else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        
        message = f"üìù *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è: {field_name}*\n\n"
        message += f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: `{display_value}`\n\n"
        message += f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è {field_name}:"
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª—è", callback_data=f"edit_{user['uuid']}")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"view_{user['uuid']}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
        return EDIT_VALUE

    elif data.startswith("edit_"):
        # Return to the edit menu for this user
        try:
            uuid = data.split("_", 1)[1]
        except Exception:
            return EDIT_USER
        return await start_edit_user(update, context, uuid)

    elif data.startswith("view_"):
        uuid = data.split("_")[1]
        await show_user_details(update, context, uuid)
        return SELECTING_USER
    
    elif data == "back_to_users":
        await show_users_menu(update, context)
        return USER_MENU
    
    return EDIT_USER

@check_admin
async def handle_edit_field_value(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle edit field value input"""
    # Handle navigation callbacks while in EDIT_VALUE state
    if hasattr(update, "callback_query") and update.callback_query:
        query = update.callback_query
        await query.answer()
        data = query.data
        if data.startswith("edit_"):
            try:
                uuid = data.split("_", 1)[1]
            except Exception:
                return EDIT_USER
            return await start_edit_user(update, context, uuid)
        elif data.startswith("view_"):
            uuid = data.split("_", 1)[1]
            await show_user_details(update, context, uuid)
            return SELECTING_USER
        elif data == "back_to_users":
            await show_users_menu(update, context)
            return USER_MENU
        return EDIT_VALUE

    field = context.user_data.get("edit_field")
    user = context.user_data.get("edit_user")
    
    if not field or not user:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return USER_MENU
    
    value = update.message.text.strip()
    
    # Process the value based on the field
    if field == "expireAt":
        try:
            # Validate date format
            date_obj = datetime.strptime(value, "%Y-%m-%d")
            value = date_obj.strftime("%Y-%m-%dT00:00:00.000Z")
        except ValueError:
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"edit_{user['uuid']}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD.",
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
            return EDIT_USER
    
    elif field == "trafficLimitBytes":
        try:
            value = int(value)
            if value < 0:
                raise ValueError("Traffic limit cannot be negative")
        except ValueError:
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"edit_{user['uuid']}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ >= 0.",
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
            return EDIT_USER
    
    elif field == "telegramId":
        try:
            value = int(value)
        except ValueError:
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"edit_{user['uuid']}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram ID. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.",
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
            return EDIT_USER
            
    elif field == "hwidDeviceLimit":
        try:
            value = int(value)
            if value < 0:
                raise ValueError("Device limit cannot be negative")
        except ValueError:
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"edit_{user['uuid']}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ >= 0.",
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
            return EDIT_USER
    
    # Update the user with the new value
    update_data = {field: value}
    
    # –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ª–∏–º–∏—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤ > 0, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±–Ω–æ–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ trafficLimitStrategy=NO_RESET
    if field == "hwidDeviceLimit" and value > 0:
        update_data["trafficLimitStrategy"] = "NO_RESET"
        logger.info(f"Auto-setting trafficLimitStrategy=NO_RESET when setting hwidDeviceLimit to {value} for user {user['uuid']}")
    result = await UserAPI.update_user(user["uuid"], update_data)
    
    if result:
        keyboard = [
            [InlineKeyboardButton("üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"view_{user['uuid']}")],
            [InlineKeyboardButton("üìù –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data=f"edit_{user['uuid']}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_list")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"‚úÖ –ü–æ–ª–µ {field} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    else:
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"edit_{user['uuid']}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª–µ {field}.",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    
    return EDIT_USER

@check_admin
async def handle_cancel_user_creation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle cancel user creation"""
    query = update.callback_query
    await query.answer("–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ")
    
    # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    keys_to_remove = [
        'create_user', 'create_user_fields', 'current_field_index', 
        'using_template', 'template_name', 'selected_template',
        'search_type', 'waiting_for'
    ]
    
    for key in keys_to_remove:
        context.user_data.pop(key, None)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await show_users_menu(update, context)
    return USER_MENU
