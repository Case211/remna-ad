from datetime import datetime

import logging
from datetime import datetime

logger = logging.getLogger(__name__)

async def safe_edit_message(query, text, reply_markup=None, parse_mode=None):
    """Safely edit message text with error handling for 'Message is not modified'"""
    try:
        await query.edit_message_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode=parse_mode
        )
        return True
    except Exception as e:
        error_msg = str(e).lower()
        if "not modified" in error_msg or "message is not modified" in error_msg:
            # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –∏–º–µ–µ—Ç —Ç–∞–∫–æ–π –∂–µ —Ç–µ–∫—Å—Ç, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
            logger.debug("Message content unchanged, skipping update")
            try:
                await query.answer()
            except Exception:
                pass  # Ignore if callback already answered
            return True
        else:
            # –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –ª–æ–≥–∏—Ä—É–µ–º –µ–µ
            logger.error(f"Error editing message: {e}")
            try:
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
            except Exception:
                pass
            return False

def format_bytes(bytes_value):
    """Format bytes to human-readable format"""
    if not bytes_value:
        return "0 B"  # Handle None or empty values
    
    # –ï—Å–ª–∏ bytes_value —Å—Ç—Ä–æ–∫–∞, –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ
    if isinstance(bytes_value, str):
        try:
            bytes_value = float(bytes_value)
        except (ValueError, TypeError):
            return bytes_value  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    
    if bytes_value == 0:
        return "0 B"

    for unit in ['B', 'KB', 'MB', 'GB', 'TB']:
        if bytes_value < 1024.0:
            return f"{bytes_value:.2f} {unit}"
        bytes_value /= 1024.0
    return f"{bytes_value:.2f} PB"

def create_progress_bar(percentage, length=20):
    """Create a visual progress bar"""
    if percentage < 0:
        percentage = 0
    elif percentage > 100:
        percentage = 100
    
    filled_length = int((percentage / 100) * length)
    bar = "‚ñà" * filled_length + "‚ñë" * (length - filled_length)
    return bar

def escape_markdown(text):
    """Escape Markdown special characters for Telegram (simplified for text, not URLs)"""
    if text is None:
        return ""
    
    text = str(text)
    
    # –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    escape_chars = [
        ('\\', '\\\\'),  # Backslash –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º
        ('_', '\\_'),
        ('*', '\\*'),
        ('[', '\\['),
        (']', '\\]'),
        ('`', '\\`')
    ]
    
    for char, escaped in escape_chars:
        text = text.replace(char, escaped)
    
    return text

def format_user_details(user):
    """Format user details for display with enhanced error handling"""
    try:
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏—Å—Ç–µ—á–µ–Ω–∏—è
        expire_date = datetime.fromisoformat(user['expireAt'].replace('Z', '+00:00'))
        days_left = (expire_date - datetime.now().astimezone()).days
        expire_status = "üü¢" if days_left > 7 else "üü°" if days_left > 0 else "üî¥"
        expire_text = f"{user['expireAt'][:10]} ({days_left} –¥–Ω–µ–π)"
    except Exception as e:
        expire_status = "üìÖ"
        expire_text = user['expireAt'][:10] if 'expireAt' in user and user['expireAt'] else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    status_emoji = "‚úÖ" if user["status"] == "ACTIVE" else "‚ùå"
    
    try:
        message = f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {escape_markdown(user.get('username',''))}\n"
        message += f"üÜî *UUID:* `{user.get('uuid','')}`\n"
        if user.get('shortUuid'):
            message += f"üîë *–ö–æ—Ä–æ—Ç–∫–∏–π UUID:* `{user.get('shortUuid')}`\n"
        if user.get('subscriptionUuid'):
            message += f"üìù *UUID –ø–æ–¥–ø–∏—Å–∫–∏:* `{user.get('subscriptionUuid')}`\n"
        message += "\n"
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º URL –ø–æ–¥–ø–∏—Å–∫–∏
        subscription_url = user.get('subscriptionUrl', '')
        if subscription_url:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–ª–æ–∫ –∫–æ–¥–∞ Markdown –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è URL
            safe_url = escape_markdown(subscription_url)
            message += f"üîó *URL –ø–æ–¥–ø–∏—Å–∫–∏:*\n`{safe_url}`\n\n"
        else:
            message += f"üîó *URL –ø–æ–¥–ø–∏—Å–∫–∏:* –ù–µ —É–∫–∞–∑–∞–Ω\n\n"
        
        message += f"üìä *–°—Ç–∞—Ç—É—Å:* {status_emoji} {user['status']}\n"
        message += f"üìà *–¢—Ä–∞—Ñ–∏–∫:* {format_bytes(user['usedTrafficBytes'])}/{format_bytes(user['trafficLimitBytes'])}\n"
        message += f"üîÑ *–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–±—Ä–æ—Å–∞:* {user['trafficLimitStrategy']}\n"
        message += f"{expire_status} *–ò—Å—Ç–µ–∫–∞–µ—Ç:* {expire_text}\n\n"
        
        if user.get('description'):
            message += f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {escape_markdown(str(user['description']))}\n"
        
        if user.get('tag'):
            message += f"üè∑Ô∏è *–¢–µ–≥:* {escape_markdown(str(user['tag']))}\n"
        
        if user.get('telegramId'):
            message += f"üì± *Telegram ID:* {user['telegramId']}\n"
        
        if user.get('email'):
            message += f"üìß *Email:* {escape_markdown(str(user['email']))}\n"
        
        if user.get('hwidDeviceLimit'):
            message += f"üì± *–õ–∏–º–∏—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤:* {user['hwidDeviceLimit']}\n"
        
        if user.get('createdAt'):
            message += f"\n‚è±Ô∏è *–°–æ–∑–¥–∞–Ω:* {user['createdAt'][:10]}\n"
        if user.get('updatedAt'):
            message += f"üîÑ *–û–±–Ω–æ–≤–ª–µ–Ω:* {user['updatedAt'][:10]}\n"
        
        return message
    except Exception as e:
        # Fallback —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ Markdown
        logger.warning(f"Error in format_user_details: {e}")
        
        message = f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.get('username','')}\n"
        message += f"üÜî UUID: {user.get('uuid','')}\n"
        if user.get('shortUuid'):
            message += f"üîë –ö–æ—Ä–æ—Ç–∫–∏–π UUID: {user.get('shortUuid')}\n"
        if user.get('subscriptionUuid'):
            message += f"üìù UUID –ø–æ–¥–ø–∏—Å–∫–∏: {user.get('subscriptionUuid')}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º URL –ø–æ–¥–ø–∏—Å–∫–∏ –≤ fallback –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        subscription_url = user.get('subscriptionUrl', '')
        if subscription_url:
            message += f"üîó URL –ø–æ–¥–ø–∏—Å–∫–∏:\n{subscription_url}\n\n"
        else:
            message += f"üîó URL –ø–æ–¥–ø–∏—Å–∫–∏: –ù–µ —É–∫–∞–∑–∞–Ω\n\n"
        
        message += f"üìä –°—Ç–∞—Ç—É—Å: {status_emoji} {user['status']}\n"
        message += f"üìà –¢—Ä–∞—Ñ–∏–∫: {format_bytes(user['usedTrafficBytes'])}/{format_bytes(user['trafficLimitBytes'])}\n"
        message += f"üîÑ –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–±—Ä–æ—Å–∞: {user['trafficLimitStrategy']}\n"
        message += f"{expire_status} –ò—Å—Ç–µ–∫–∞–µ—Ç: {expire_text}\n\n"
        
        if user.get('description'):
            message += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {user['description']}\n"
        
        if user.get('tag'):
            message += f"üè∑Ô∏è –¢–µ–≥: {user['tag']}\n"
        
        if user.get('telegramId'):
            message += f"üì± Telegram ID: {user['telegramId']}\n"
        
        if user.get('email'):
            message += f"üìß Email: {user['email']}\n"
        
        if user.get('hwidDeviceLimit'):
            message += f"üì± –õ–∏–º–∏—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {user['hwidDeviceLimit']}\n"
        
        if user.get('createdAt'):
            message += f"\n‚è±Ô∏è –°–æ–∑–¥–∞–Ω: {user['createdAt'][:10]}\n"
        if user.get('updatedAt'):
            message += f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω: {user['updatedAt'][:10]}\n"
        
        return message

def format_user_details_safe(user):
    """Format user details for display without Markdown (safe fallback)"""
    try:
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏—Å—Ç–µ—á–µ–Ω–∏—è
        expire_date = datetime.fromisoformat(user['expireAt'].replace('Z', '+00:00'))
        days_left = (expire_date - datetime.now().astimezone()).days
        expire_status = "üü¢" if days_left > 7 else "üü°" if days_left > 0 else "üî¥"
        expire_text = f"{user['expireAt'][:10]} ({days_left} –¥–Ω–µ–π)"
    except Exception as e:
        expire_status = "üìÖ"
        expire_text = user['expireAt'][:10] if 'expireAt' in user and user['expireAt'] else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    status_emoji = "‚úÖ" if user["status"] == "ACTIVE" else "‚ùå"
    
    message = f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user['username']}\n"
    message += f"üÜî UUID: {user.get('uuid','')}\n"
    if user.get('shortUuid'):
        message += f"üîë –ö–æ—Ä–æ—Ç–∫–∏–π UUID: {user.get('shortUuid')}\n"
    if user.get('subscriptionUuid'):
        message += f"üìù UUID –ø–æ–¥–ø–∏—Å–∫–∏: {user.get('subscriptionUuid')}\n\n"
    
    # URL –ø–æ–¥–ø–∏—Å–∫–∏ –±–µ–∑ –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–±–µ–∑ <pre> –∏ –±–µ–∑ –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞)
    subscription_url = user.get('subscriptionUrl', '')
    if subscription_url:
        message += f"üîó URL –ø–æ–¥–ø–∏—Å–∫–∏:\n{subscription_url}\n\n"
    else:
        message += f"üîó URL –ø–æ–¥–ø–∏—Å–∫–∏: –ù–µ —É–∫–∞–∑–∞–Ω\n\n"
    
    message += f"üìä –°—Ç–∞—Ç—É—Å: {status_emoji} {user['status']}\n"
    message += f"üìà –¢—Ä–∞—Ñ–∏–∫: {format_bytes(user['usedTrafficBytes'])}/{format_bytes(user['trafficLimitBytes'])}\n"
    message += f"üîÑ –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–±—Ä–æ—Å–∞: {user['trafficLimitStrategy']}\n"
    message += f"{expire_status} –ò—Å—Ç–µ–∫–∞–µ—Ç: {expire_text}\n\n"
    
    if user.get('description'):
        message += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {user['description']}\n"
    
    if user.get('tag'):
        message += f"üè∑Ô∏è –¢–µ–≥: {user['tag']}\n"
    
    if user.get('telegramId'):
        message += f"üì± Telegram ID: {user['telegramId']}\n"
    
    if user.get('email'):
        message += f"üìß Email: {user['email']}\n"
    
    if user.get('hwidDeviceLimit'):
        message += f"üì± –õ–∏–º–∏—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {user['hwidDeviceLimit']}\n"
    
    if user.get('createdAt'):
        message += f"\n‚è±Ô∏è –°–æ–∑–¥–∞–Ω: {user['createdAt'][:10]}\n"
    if user.get('updatedAt'):
        message += f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω: {user['updatedAt'][:10]}\n"
    
    return message

def format_node_details(node):
    """Format node details for display with enhanced system information"""
    status_emoji = "üü¢" if node["isConnected"] and not node["isDisabled"] else "üî¥"

    message = f"*üñ•Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ*\n\n"
    message += f"{status_emoji} *–ò–º—è*: {escape_markdown(node['name'])}\n"
    message += f"üÜî *UUID*: `{node['uuid']}`\n"
    message += f"üåê *–ê–¥—Ä–µ—Å*: {escape_markdown(node['address'])}:{node['port']}\n\n"

    # Enhanced Status Information
    message += f"üìä *–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞*:\n"
    message += f"  ‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω: {'‚úÖ' if node['isConnected'] else '‚ùå'}\n"
    message += f"  ‚Ä¢ –û—Ç–∫–ª—é—á–µ–Ω: {'‚úÖ' if node['isDisabled'] else '‚ùå'}\n"
    message += f"  ‚Ä¢ –û–Ω–ª–∞–π–Ω: {'‚úÖ' if node['isNodeOnline'] else '‚ùå'}\n"
    message += f"  ‚Ä¢ Xray –∑–∞–ø—É—â–µ–Ω: {'‚úÖ' if node['isXrayRunning'] else '‚ùå'}\n"
    message += f"  ‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞: {'‚úÖ' if node.get('isTrafficTrackingActive', False) else '‚ùå'}\n\n"

    # Version Information
    if node.get("xrayVersion"):
        message += f"üì¶ *–í–µ—Ä—Å–∏–∏*:\n"
        message += f"  ‚Ä¢ Xray: {escape_markdown(node['xrayVersion'])}\n"
        if node.get("nodeVersion"):
            message += f"  ‚Ä¢ Node: {escape_markdown(node['nodeVersion'])}\n"
        message += "\n"

    # Enhanced Uptime Information
    if node.get("xrayUptime"):
        uptime_seconds = int(node['xrayUptime'])
        uptime_days = uptime_seconds // (24 * 3600)
        uptime_hours = (uptime_seconds % (24 * 3600)) // 3600
        uptime_minutes = (uptime_seconds % 3600) // 60
        
        message += f"‚è±Ô∏è *–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã Xray*:\n"
        message += f"  ‚Ä¢ {uptime_days}–¥ {uptime_hours}—á {uptime_minutes}–º\n"
        message += f"  ‚Ä¢ –í—Å–µ–≥–æ —Å–µ–∫—É–Ω–¥: {uptime_seconds:,}\n\n"
    
    # Location and Configuration
    message += f"üåç *–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ*: {node['countryCode']}\n"
    message += f"üìä *–ú–Ω–æ–∂–∏—Ç–µ–ª—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è*: {node['consumptionMultiplier']}x\n"
    if node.get("trafficResetDay"):
        message += f"üîÑ *–î–µ–Ω—å —Å–±—Ä–æ—Å–∞ —Ç—Ä–∞—Ñ–∏–∫–∞*: {node['trafficResetDay']}\n"
    message += "\n"

    # Traffic Information with Progress Bar
    if node.get("trafficLimitBytes") is not None:
        used_bytes = node.get('trafficUsedBytes', 0)
        limit_bytes = node['trafficLimitBytes']
        traffic_percent = (used_bytes / limit_bytes) * 100 if limit_bytes > 0 else 0
        
        message += f"üìà *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞*:\n"
        message += f"  ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {format_bytes(used_bytes)}\n"
        message += f"  ‚Ä¢ –õ–∏–º–∏—Ç: {format_bytes(limit_bytes)}\n"
        message += f"  ‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: {format_bytes(limit_bytes - used_bytes)}\n"
        message += f"  ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç: {traffic_percent:.1f}%\n"
        
        # Traffic usage bar
        traffic_bar = create_progress_bar(traffic_percent, 15)
        message += f"  ‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å: `{traffic_bar}` {traffic_percent:.1f}%\n\n"

    # Users Information
    if node.get("usersOnline") is not None:
        users_online = node['usersOnline']
        message += f"üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏*:\n"
        message += f"  ‚Ä¢ –°–µ–π—á–∞—Å –æ–Ω–ª–∞–π–Ω: {users_online}\n"
        if node.get("notifyPercent"):
            message += f"  ‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏: {node['notifyPercent']}% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
        message += "\n"

    # Enhanced System Information
    if node.get("cpuCount") and node.get("cpuModel"):
        message += f"üíª *–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã*:\n"
        message += f"  ‚Ä¢ CPU: {escape_markdown(node['cpuModel'])} ({node['cpuCount']} —è–¥–µ—Ä)\n"
        if node.get("totalRam"):
            message += f"  ‚Ä¢ RAM: {escape_markdown(node['totalRam'])}\n"
        message += "\n"

    # Connection Information
    if node.get("lastStatusChange"):
        message += f"üîó *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è*:\n"
        message += f"  ‚Ä¢ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω: {node['lastStatusChange'][:19]}\n"
        if node.get("lastStatusMessage"):
            message += f"  ‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–µ: {escape_markdown(node['lastStatusMessage'])}\n"
        message += "\n"

    # Health Status
    message += f"üè• *–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞*:\n"
    
    # Overall health based on multiple factors
    health_score = 0
    if node.get("isConnected", False):
        health_score += 1
    if node.get("isNodeOnline", False):
        health_score += 1
    if node.get("isXrayRunning", False):
        health_score += 1
    if not node.get("isDisabled", True):
        health_score += 1
    
    if health_score >= 3:
        health_status = "üü¢ –û—Ç–ª–∏—á–Ω–æ–µ"
    elif health_score >= 2:
        health_status = "üü° –•–æ—Ä–æ—à–µ–µ"
    else:
        health_status = "üî¥ –ü—Ä–æ–±–ª–µ–º—ã"
    
    message += f"  ‚Ä¢ –û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {health_status}\n"
    
    # Traffic health
    if node.get("trafficLimitBytes") and node.get("trafficUsedBytes"):
        traffic_percent = (node['trafficUsedBytes'] / node['trafficLimitBytes']) * 100
        if traffic_percent > 90:
            traffic_status = "üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ"
        elif traffic_percent > 75:
            traffic_status = "üü° –í—ã—Å–æ–∫–æ–µ"
        else:
            traffic_status = "üü¢ –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ"
        message += f"  ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞: {traffic_status} ({traffic_percent:.1f}%)\n"

    return message

def format_host_details(host):
    """Format host details for display"""
    status_emoji = "üü¢" if not host["isDisabled"] else "üî¥"

    message = f"*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ö–æ—Å—Ç–µ*\n\n"
    message += f"{status_emoji} *–ù–∞–∑–≤–∞–Ω–∏–µ*: {escape_markdown(host['remark'])}\n"
    message += f"üÜî *UUID*: `{host['uuid']}`\n"
    message += f"üåê *–ê–¥—Ä–µ—Å*: {escape_markdown(host['address'])}:{host['port']}\n\n"
    
    # v208: inbound is an object with configProfileUuid/configProfileInboundUuid
    inbound = host.get('inbound') or {}
    config_profile_uuid = inbound.get('configProfileUuid')
    config_profile_inbound_uuid = inbound.get('configProfileInboundUuid')
    if config_profile_uuid or config_profile_inbound_uuid:
        cp = config_profile_uuid or '‚Äî'
        cpi = config_profile_inbound_uuid or '‚Äî'
        message += f"üîå *Inbound*: cp=`{cp}` inbound=`{cpi}`\n"
    
    if host.get("path"):
        message += f"üõ£Ô∏è *–ü—É—Ç—å*: {escape_markdown(host['path'])}\n"
    
    if host.get("sni"):
        message += f"üîí *SNI*: {escape_markdown(host['sni'])}\n"
    
    if host.get("host"):
        message += f"üè† *Host*: {escape_markdown(host['host'])}\n"
    
    if host.get("alpn"):
        message += f"üîÑ *ALPN*: {escape_markdown(host['alpn'])}\n"
    
    if host.get("fingerprint"):
        message += f"üëÜ *Fingerprint*: {escape_markdown(host['fingerprint'])}\n"
    
    # allowInsecure removed in v208; keep Security Layer
    message += f"üõ°Ô∏è *Security Layer*: {host.get('securityLayer', 'DEFAULT')}\n"
    
    return message

def format_system_stats(stats):
    """Format system statistics for display with detailed resource information"""
    message = f"*üñ•Ô∏è –°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"

    # CPU Information
    cpu_cores = stats['cpu']['cores']
    physical_cores = stats['cpu']['physicalCores']
    message += f"üíª *–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä*:\n"
    message += f"  ‚Ä¢ –Ø–¥–µ—Ä: {cpu_cores} ({physical_cores} —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö)\n"
    message += f"  ‚Ä¢ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {cpu_cores // physical_cores if physical_cores > 0 else 1} –ø–æ—Ç–æ–∫–æ–≤ –Ω–∞ —è–¥—Ä–æ\n\n"

    # Memory Information with detailed breakdown
    total_mem = stats['memory']['total']
    free_mem = stats['memory']['free']
    available_mem = stats['memory'].get('available', free_mem)
    active_mem = stats['memory'].get('active', 0)
    
    # Correct memory calculation for Linux systems
    # In Linux: used = total - available (not total - free)
    # available = free + buffers + cache
    used_mem = total_mem - available_mem
    cached_mem = available_mem - free_mem
    
    # Calculate percentages based on available memory (more accurate)
    used_percent = (used_mem / total_mem) * 100 if total_mem > 0 else 0
    free_percent = (free_mem / total_mem) * 100 if total_mem > 0 else 0
    available_percent = (available_mem / total_mem) * 100 if total_mem > 0 else 0
    cached_percent = (cached_mem / total_mem) * 100 if total_mem > 0 else 0
    
    message += f"üß† *–ü–∞–º—è—Ç—å*:\n"
    message += f"  ‚Ä¢ –í—Å–µ–≥–æ: {format_bytes(total_mem)}\n"
    message += f"  ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {format_bytes(used_mem)} ({used_percent:.1f}%)\n"
    message += f"  ‚Ä¢ –°–≤–æ–±–æ–¥–Ω–æ: {format_bytes(free_mem)} ({free_percent:.1f}%)\n"
    message += f"  ‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ: {format_bytes(available_mem)} ({available_percent:.1f}%)\n"
    message += f"  ‚Ä¢ –ö—ç—à/–ë—É—Ñ–µ—Ä—ã: {format_bytes(cached_mem)} ({cached_percent:.1f}%)\n"
    message += f"  ‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∞—è: {format_bytes(active_mem)}\n"
    
    # Memory usage bar based on actual usage (total - available)
    memory_bar = create_progress_bar(used_percent, 20)
    message += f"  ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `{memory_bar}` {used_percent:.1f}%\n\n"

    # Uptime with more details
    uptime_seconds = int(stats['uptime'])
    uptime_days = uptime_seconds // (24 * 3600)
    uptime_hours = (uptime_seconds % (24 * 3600)) // 3600
    uptime_minutes = (uptime_seconds % 3600) // 60
    uptime_seconds_remainder = uptime_seconds % 60

    message += f"‚è±Ô∏è *–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã*:\n"
    message += f"  ‚Ä¢ {uptime_days}–¥ {uptime_hours}—á {uptime_minutes}–º {uptime_seconds_remainder}—Å\n"
    message += f"  ‚Ä¢ –í—Å–µ–≥–æ —Å–µ–∫—É–Ω–¥: {uptime_seconds:,}\n\n"

    # Users Statistics
    users_data = stats['users']
    total_users = users_data['totalUsers']
    status_counts = users_data.get('statusCounts', {})
    
    message += f"üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏*:\n"
    message += f"  ‚Ä¢ –í—Å–µ–≥–æ: {total_users}\n"
    
    # User status breakdown
    if status_counts:
        for status, count in status_counts.items():
            status_emoji = {
                'ACTIVE': '‚úÖ',
                'DISABLED': '‚ùå', 
                'LIMITED': '‚ö†Ô∏è',
                'EXPIRED': '‚è∞'
            }.get(status, '‚ùì')
            status_percent = (count / total_users) * 100 if total_users > 0 else 0
            message += f"  ‚Ä¢ {status_emoji} {status}: {count} ({status_percent:.1f}%)\n"

    # Traffic information
    total_traffic = int(users_data.get('totalTrafficBytes', 0))
    message += f"  ‚Ä¢ –û–±—â–∏–π —Ç—Ä–∞—Ñ–∏–∫: {format_bytes(total_traffic)}\n\n"

    # Online Statistics
    online_stats = stats['onlineStats']
    message += f"üìä *–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*:\n"
    message += f"  ‚Ä¢ –°–µ–π—á–∞—Å –æ–Ω–ª–∞–π–Ω: {online_stats['onlineNow']}\n"
    message += f"  ‚Ä¢ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å: {online_stats['lastDay']}\n"
    message += f"  ‚Ä¢ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é: {online_stats['lastWeek']}\n"
    message += f"  ‚Ä¢ –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –±—ã–ª–∏ –æ–Ω–ª–∞–π–Ω: {online_stats['neverOnline']}\n"
    
    # Online percentage
    if total_users > 0:
        online_percent = (online_stats['onlineNow'] / total_users) * 100
        message += f"  ‚Ä¢ –û–Ω–ª–∞–π–Ω —Å–µ–π—á–∞—Å: {online_percent:.1f}% –æ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
    else:
        message += "\n"

    # Nodes Statistics
    if 'nodes' in stats:
        nodes_data = stats['nodes']
        total_online = nodes_data.get('totalOnline', 0)
        message += f"üñ•Ô∏è *–°–µ—Ä–≤–µ—Ä—ã*:\n"
        message += f"  ‚Ä¢ –û–Ω–ª–∞–π–Ω: {total_online}\n"
        message += f"  ‚Ä¢ –°—Ç–∞—Ç—É—Å: {'üü¢ –í—Å–µ —Ä–∞–±–æ—Ç–∞—é—Ç' if total_online > 0 else 'üî¥ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö'}\n\n"

    # System Health Summary
    message += f"üè• *–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã*:\n"
    
    # Memory health
    if used_percent > 90:
        memory_status = "üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ"
    elif used_percent > 75:
        memory_status = "üü° –í—ã—Å–æ–∫–æ–µ"
    else:
        memory_status = "üü¢ –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ"
    message += f"  ‚Ä¢ –ü–∞–º—è—Ç—å: {memory_status} ({used_percent:.1f}%)\n"
    
    # Uptime health
    if uptime_days > 30:
        uptime_status = "üü¢ –°—Ç–∞–±–∏–ª—å–Ω–æ–µ"
    elif uptime_days > 7:
        uptime_status = "üü° –•–æ—Ä–æ—à–µ–µ"
    else:
        uptime_status = "üü° –ù–µ–¥–∞–≤–Ω–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫"
    message += f"  ‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: {uptime_status} ({uptime_days} –¥–Ω–µ–π)\n"
    
    # Users health
    active_users = status_counts.get('ACTIVE', 0)
    if total_users > 0:
        active_percent = (active_users / total_users) * 100
        if active_percent > 80:
            users_status = "üü¢ –û—Ç–ª–∏—á–Ω–æ–µ"
        elif active_percent > 60:
            users_status = "üü° –•–æ—Ä–æ—à–µ–µ"
        else:
            users_status = "üî¥ –ù–∏–∑–∫–æ–µ"
        message += f"  ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {users_status} ({active_percent:.1f}% –∞–∫—Ç–∏–≤–Ω—ã—Ö)\n"

    return message

def format_bandwidth_stats(stats):
    """Format bandwidth statistics for display"""
    message = f"*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞*\n\n"

    message += f"üìÖ *–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –¥–Ω—è*:\n"
    message += f"  ‚Ä¢ –¢–µ–∫—É—â–∏–π: {stats['bandwidthLastTwoDays']['current']}\n"
    message += f"  ‚Ä¢ –ü—Ä–µ–¥—ã–¥—É—â–∏–π: {stats['bandwidthLastTwoDays']['previous']}\n"
    message += f"  ‚Ä¢ –†–∞–∑–Ω–∏—Ü–∞: {stats['bandwidthLastTwoDays']['difference']}\n\n"

    message += f"üìÜ *–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π*:\n"
    message += f"  ‚Ä¢ –¢–µ–∫—É—â–∏–π: {stats['bandwidthLastSevenDays']['current']}\n"
    message += f"  ‚Ä¢ –ü—Ä–µ–¥—ã–¥—É—â–∏–π: {stats['bandwidthLastSevenDays']['previous']}\n"
    message += f"  ‚Ä¢ –†–∞–∑–Ω–∏—Ü–∞: {stats['bandwidthLastSevenDays']['difference']}\n\n"

    message += f"üìä *–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π*:\n"
    message += f"  ‚Ä¢ –¢–µ–∫—É—â–∏–π: {stats['bandwidthLast30Days']['current']}\n"
    message += f"  ‚Ä¢ –ü—Ä–µ–¥—ã–¥—É—â–∏–π: {stats['bandwidthLast30Days']['previous']}\n"
    message += f"  ‚Ä¢ –†–∞–∑–Ω–∏—Ü–∞: {stats['bandwidthLast30Days']['difference']}\n\n"

    message += f"üìà *–ó–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü*:\n"
    message += f"  ‚Ä¢ –¢–µ–∫—É—â–∏–π: {stats['bandwidthCalendarMonth']['current']}\n"
    message += f"  ‚Ä¢ –ü—Ä–µ–¥—ã–¥—É—â–∏–π: {stats['bandwidthCalendarMonth']['previous']}\n"
    message += f"  ‚Ä¢ –†–∞–∑–Ω–∏—Ü–∞: {stats['bandwidthCalendarMonth']['difference']}\n\n"

    message += f"üìâ *–ó–∞ —Ç–µ–∫—É—â–∏–π –≥–æ–¥*:\n"
    message += f"  ‚Ä¢ –¢–µ–∫—É—â–∏–π: {stats['bandwidthCurrentYear']['current']}\n"
    message += f"  ‚Ä¢ –ü—Ä–µ–¥—ã–¥—É—â–∏–π: {stats['bandwidthCurrentYear']['previous']}\n"
    message += f"  ‚Ä¢ –†–∞–∑–Ω–∏—Ü–∞: {stats['bandwidthCurrentYear']['difference']}\n"

    return message

def format_nodes_stats(nodes_data):
    """Format nodes statistics with system resources"""
    if not nodes_data or len(nodes_data) == 0:
        return "*üñ•Ô∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤*\n\n‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–µ—Ä–≤–µ—Ä–∞—Ö"
    
    message = f"*üñ•Ô∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤*\n\n"
    
    # Summary statistics
    total_nodes = len(nodes_data)
    connected_nodes = sum(1 for node in nodes_data if node.get('isConnected', False))
    online_nodes = sum(1 for node in nodes_data if node.get('isNodeOnline', False))
    running_xray = sum(1 for node in nodes_data if node.get('isXrayRunning', False))
    disabled_nodes = sum(1 for node in nodes_data if node.get('isDisabled', False))
    
    message += f"üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*:\n"
    message += f"  ‚Ä¢ –í—Å–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: {total_nodes}\n"
    message += f"  ‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ: {connected_nodes} ({connected_nodes/total_nodes*100:.1f}%)\n"
    message += f"  ‚Ä¢ –û–Ω–ª–∞–π–Ω: {online_nodes} ({online_nodes/total_nodes*100:.1f}%)\n"
    message += f"  ‚Ä¢ Xray —Ä–∞–±–æ—Ç–∞–µ—Ç: {running_xray} ({running_xray/total_nodes*100:.1f}%)\n"
    message += f"  ‚Ä¢ –û—Ç–∫–ª—é—á–µ–Ω–æ: {disabled_nodes} ({disabled_nodes/total_nodes*100:.1f}%)\n\n"
    
    # System resources summary
    total_ram = 0
    total_cpu_cores = 0
    total_traffic_used = 0
    total_traffic_limit = 0
    total_users_online = 0
    
    for node in nodes_data:
        if node.get('totalRam'):
            try:
                # Parse RAM string like "1.01 GB"
                ram_str = node['totalRam'].replace(' GB', '').replace(' MB', '')
                if 'GB' in node['totalRam']:
                    total_ram += float(ram_str) * 1024  # Convert GB to MB
                elif 'MB' in node['totalRam']:
                    total_ram += float(ram_str)
            except:
                pass
        
        if node.get('cpuCount'):
            total_cpu_cores += node['cpuCount']
        
        if node.get('trafficUsedBytes'):
            total_traffic_used += node['trafficUsedBytes']
        
        if node.get('trafficLimitBytes'):
            total_traffic_limit += node['trafficLimitBytes']
        
        if node.get('usersOnline'):
            total_users_online += node['usersOnline']
    
    if total_ram > 0:
        message += f"üíª *–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã*:\n"
        message += f"  ‚Ä¢ –û–±—â–∞—è RAM: {total_ram/1024:.1f} GB\n"
        message += f"  ‚Ä¢ –û–±—â–∏–µ CPU —è–¥—Ä–∞: {total_cpu_cores}\n"
        message += f"  ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω: {total_users_online}\n\n"
    
    if total_traffic_limit > 0:
        traffic_percent = (total_traffic_used / total_traffic_limit) * 100
        message += f"üìà *–û–±—â–∏–π —Ç—Ä–∞—Ñ–∏–∫*:\n"
        message += f"  ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {format_bytes(total_traffic_used)}\n"
        message += f"  ‚Ä¢ –õ–∏–º–∏—Ç: {format_bytes(total_traffic_limit)}\n"
        message += f"  ‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: {format_bytes(total_traffic_limit - total_traffic_used)}\n"
        message += f"  ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç: {traffic_percent:.1f}%\n"
        
        # Overall traffic bar
        traffic_bar = create_progress_bar(traffic_percent, 20)
        message += f"  ‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å: `{traffic_bar}` {traffic_percent:.1f}%\n\n"
    
    # Individual node details
    message += f"üñ•Ô∏è *–î–µ—Ç–∞–ª–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤*:\n"
    
    for i, node in enumerate(nodes_data, 1):
        status_emoji = "üü¢" if node.get('isConnected', False) and not node.get('isDisabled', False) else "üî¥"
        
        message += f"\n{i}. {status_emoji} *{escape_markdown(node.get('name', 'Unknown'))}*\n"
        message += f"   ‚Ä¢ –ê–¥—Ä–µ—Å: {escape_markdown(node.get('address', 'N/A'))}:{node.get('port', 'N/A')}\n"
        message += f"   ‚Ä¢ –°—Ç–∞—Ç—É—Å: {'–ü–æ–¥–∫–ª—é—á–µ–Ω' if node.get('isConnected', False) else '–û—Ç–∫–ª—é—á–µ–Ω'}\n"
        message += f"   ‚Ä¢ Xray: {'–ó–∞–ø—É—â–µ–Ω' if node.get('isXrayRunning', False) else '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
        
        if node.get('usersOnline') is not None:
            message += f"   ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω: {node['usersOnline']}\n"
        
        if node.get('totalRam'):
            message += f"   ‚Ä¢ RAM: {escape_markdown(node['totalRam'])}\n"
        
        if node.get('cpuCount'):
            message += f"   ‚Ä¢ CPU: {node['cpuCount']} —è–¥–µ—Ä\n"
        
        if node.get('trafficLimitBytes') and node.get('trafficUsedBytes'):
            used = node['trafficUsedBytes']
            limit = node['trafficLimitBytes']
            percent = (used / limit) * 100 if limit > 0 else 0
            message += f"   ‚Ä¢ –¢—Ä–∞—Ñ–∏–∫: {format_bytes(used)}/{format_bytes(limit)} ({percent:.1f}%)\n"
    
    return message

def format_inbound_details(inbound):
    """Format inbound details for display with enhanced formatting"""
    message = f"üîå *–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± Inbound*\n\n"
    
    # Basic information
    message += f"üìã *–û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:*\n"
    message += f"  üè∑Ô∏è *–¢–µ–≥*: {escape_markdown(inbound['tag'])}\n"
    message += f"  üÜî *UUID*: `{inbound['uuid']}`\n"
    message += f"  üîå *–¢–∏–ø*: {inbound['type']}\n"
    message += f"  üî¢ *–ü–æ—Ä—Ç*: {inbound['port']}\n"
    
    # Status information
    status_emoji = "üü¢" if inbound.get('enabled', True) else "üî¥"
    status_text = "–ê–∫—Ç–∏–≤–µ–Ω" if inbound.get('enabled', True) else "–û—Ç–∫–ª—é—á–µ–Ω"
    message += f"  üìä *–°—Ç–∞—Ç—É—Å*: {status_emoji} {status_text}\n"
    
    # Network and security
    if inbound.get('network'):
        message += f"  üåê *–°–µ—Ç—å*: {inbound['network']}\n"
    
    if inbound.get('security'):
        message += f"  üîí *–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å*: {inbound['security']}\n"
    
    # User statistics
    if 'users' in inbound:
        users = inbound['users']
        total_users = users.get('enabled', 0) + users.get('disabled', 0)
        message += f"\nüë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏*:\n"
        message += f"  ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {users.get('enabled', 0)}\n"
        message += f"  ‚Ä¢ –û—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö: {users.get('disabled', 0)}\n"
        message += f"  ‚Ä¢ –í—Å–µ–≥–æ: {total_users}\n"
        if total_users > 0:
            active_percentage = (users.get('enabled', 0) / total_users) * 100
            message += f"  ‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {active_percentage:.1f}%\n"
    
    # Node statistics
    if 'nodes' in inbound:
        nodes = inbound['nodes']
        total_nodes = nodes.get('enabled', 0) + nodes.get('disabled', 0)
        message += f"\nüñ•Ô∏è *–°–µ—Ä–≤–µ—Ä—ã*:\n"
        message += f"  ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {nodes.get('enabled', 0)}\n"
        message += f"  ‚Ä¢ –û—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö: {nodes.get('disabled', 0)}\n"
        message += f"  ‚Ä¢ –í—Å–µ–≥–æ: {total_nodes}\n"
        if total_nodes > 0:
            active_percentage = (nodes.get('enabled', 0) / total_nodes) * 100
            message += f"  ‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {active_percentage:.1f}%\n"
    
    # Additional information
    if inbound.get('createdAt'):
        message += f"\nüìÖ *–°–æ–∑–¥–∞–Ω*: {inbound['createdAt']}\n"
    if inbound.get('updatedAt'):
        message += f"üîÑ *–û–±–Ω–æ–≤–ª–µ–Ω*: {inbound['updatedAt']}\n"
    
    # Configuration details
    if inbound.get('settings'):
        message += f"\n‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:*\n"
        for key, value in inbound['settings'].items():
            if isinstance(value, dict):
                message += f"  ‚Ä¢ {key}:\n"
                for sub_key, sub_value in value.items():
                    message += f"    - {sub_key}: {sub_value}\n"
            else:
                message += f"  ‚Ä¢ {key}: {value}\n"
    
    return message





def format_security_audit(report):
    """Format firewall/ports/SSH audit results for display."""
    if not report:
        return "*‚ùó –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:* –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã"

    if isinstance(report, dict) and 'response' in report and isinstance(report['response'], dict):
        report = report['response']

    if not isinstance(report, dict):
        return "*‚ùó –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:* –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞"

    def _bool_label(value, ok_label="–í–∫–ª—é—á–µ–Ω–æ", fail_label="–í—ã–∫–ª—é—á–µ–Ω–æ"):
        if value is True:
            return f"‚úÖ {ok_label}"
        if value is False:
            return f"‚ö†Ô∏è {fail_label}"
        return "‚ÑπÔ∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    def _list_block(title, items):
        if not items:
            return f"  - {title}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç\n"
        if isinstance(items, dict):
            items = [f"{k}: {v}" for k, v in items.items()]
        if not isinstance(items, (list, tuple, set)):
            items = [items]
        lines_inner = ''.join(f"  - {escape_markdown(str(item))}\n" for item in items if item)
        return lines_inner if lines_inner else f"  - {title}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç\n"

    message = "üîí *–ê—É–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞*\n\n"

    firewall = report.get('firewall') if isinstance(report, dict) else None
    if isinstance(firewall, dict):
        status = firewall.get('status') or firewall.get('state')
        provider = firewall.get('provider') or firewall.get('service')
        message += "üõ°Ô∏è *–ë—Ä–∞–Ω–¥–º–∞—É—ç—Ä*\n"
        if status:
            message += f"  - –°—Ç–∞—Ç—É—Å: {escape_markdown(str(status)).upper()}\n"
        if provider:
            message += f"  - –ú–µ–Ω–µ–¥–∂–µ—Ä: {escape_markdown(str(provider))}\n"
        message += _list_block('–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã', firewall.get('openPorts'))
        message += _list_block('–ó–∞–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã', firewall.get('closedPorts'))
        message += _list_block('–§–∏–ª—å—Ç—Ä—É–µ–º—ã–µ –ø–æ—Ä—Ç—ã', firewall.get('filteredPorts'))

        rules = firewall.get('rules')
        if rules and isinstance(rules, list):
            limited_rules = rules[:10]
            message += "  - –ü—Ä–∞–≤–∏–ª–∞:\n"
            for rule in limited_rules:
                if isinstance(rule, dict):
                    parts = [rule.get('action'), rule.get('protocol'), rule.get('port') or rule.get('ports'), rule.get('source'), rule.get('destination')]
                    text_parts = [str(p) for p in parts if p]
                    line = " ".join(text_parts)
                    description = rule.get('description') or rule.get('note')
                    if description:
                        line = f"{line} - {description}"
                    message += f"    - {escape_markdown(line)}\n"
                else:
                    message += f"    - {escape_markdown(str(rule))}\n"
            if len(rules) > len(limited_rules):
                message += f"    - ... –µ—â—ë {len(rules) - len(limited_rules)} –ø—Ä–∞–≤–∏–ª\n"
        warnings = firewall.get('warnings') or firewall.get('issues')
        if warnings:
            message += "  - –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:\n"
            warn_list = warnings if isinstance(warnings, (list, tuple, set)) else [warnings]
            for warn in warn_list:
                message += f"    - {escape_markdown(str(warn))}\n"
    else:
        message += "üõ°Ô∏è *–ë—Ä–∞–Ω–¥–º–∞—É—ç—Ä*\n  - –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã\n"

    ssh = report.get('ssh') if isinstance(report, dict) else None
    message += "\n"
    message += "üîë *SSH*\n"
    if isinstance(ssh, dict):
        port = ssh.get('port') or ssh.get('listenPort')
        if port is not None:
            message += f"  - –ü–æ—Ä—Ç: {escape_markdown(str(port))}\n"
        if 'permitRootLogin' in ssh:
            message += f"  - PermitRootLogin: {_bool_label(ssh.get('permitRootLogin'), ok_label='–†–∞–∑—Ä–µ—à—ë–Ω', fail_label='–ó–∞–ø—Ä–µ—â—ë–Ω')}\n"
        if 'passwordAuthentication' in ssh:
            message += f"  - –ü–∞—Ä–æ–ª—å–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: {_bool_label(ssh.get('passwordAuthentication'), ok_label='–†–∞–∑—Ä–µ—à–µ–Ω–∞', fail_label='–ó–∞–ø—Ä–µ—â–µ–Ω–∞')}\n"
        if 'pubkeyAuthentication' in ssh:
            message += f"  - –ö–ª—é—á–µ–≤–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: {_bool_label(ssh.get('pubkeyAuthentication'))}\n"
        if 'maxAuthTries' in ssh:
            message += f"  - –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫: {escape_markdown(str(ssh.get('maxAuthTries')))}\n"
        recommendations = ssh.get('recommendations') or ssh.get('warnings')
        if recommendations:
            message += "  - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
            rec_list = recommendations if isinstance(recommendations, (list, tuple, set)) else [recommendations]
            for rec in rec_list:
                message += f"    - {escape_markdown(str(rec))}\n"
    else:
        message += "  - –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã\n"

    other_checks = report.get('checks') if isinstance(report, dict) else None
    if isinstance(other_checks, dict) and other_checks:
        message += "\nüß™ *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏*\n"
        for name, result in other_checks.items():
            if isinstance(result, dict):
                status = result.get('status') or result.get('state') or result.get('value')
                note = result.get('message') or result.get('recommendation')
                line = escape_markdown(str(name))
                if status is not None:
                    line += f": {escape_markdown(str(status))}"
                message += f"  - {line}\n"
                if note:
                    message += f"    - {escape_markdown(str(note))}\n"
            else:
                message += f"  - {escape_markdown(str(name))}: {escape_markdown(str(result))}\n"

    summary = report.get('summary') if isinstance(report, dict) else None
    if summary:
        message += "\nüìå *–ò—Ç–æ–≥–∏*\n"
        summary_list = summary if isinstance(summary, (list, tuple, set)) else [summary]
        for item in summary_list:
            message += f"  - {escape_markdown(str(item))}\n"

    message = message.strip()
    return message or "*‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:* –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
